{% extends "layouts/pjax.nunj" if request.isPjax else
  "layouts/frame.nunj" %}

{% import "macros/errors.nunj" as errors %}

{% set page = {
  title: entity.title
} %}

{% set previewUrl = path(frctl.theme.urlFromRoute('preview', {handle: entity.handle})) %}

{% block content %}

  {% if frctl.env.server and frctl.env.sync %}
    {% set rendered = false %}
  {% else %}
    {% set rendered = entity.render(null, renderEnv, {
      preview: true,
      collate: true
    }) | async (true) %}
    {% if rendered | isError %}
      {% set error = rendered %}
      {% set renderError %}{{ errors.renderError('component', error.message) }}{% endset %}
      {% set rendered = false %}
    {% endif %}
  {%- endif %}

  <div class="Pen" data-behaviour="pen" id="pen-{{ entity.id }}">

    {% block penContent %}

    <style type="text/css">
      .Preview {
        position: relative;
      }

      .Preview-wrapper {
        position: absolute;
        top: 0;
        bottom: 0;
        height: 100%;
        width: 100%;
        width: calc(100% + 0.625rem);
        min-width: 200px;
        max-width: calc(100% + 0.625rem);
        background-color: transparent;
      }

      .Preview-resizer {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        max-width: calc(100% - 0.625rem + 1px);
        min-width: 180px;
        background-color: white;
      }

      .Preview-iframe {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        position: absolute;
        z-index: 0;
        width: 100%;
        height: 100%;
      }

      .Pen {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        height: 100%;
        overflow: hidden;
        background: white;
      }

      .Pen.is-resizing {
        cursor: grabbing;
      }

      .Pen.is-resizing .Pen-handle {
        cursor: grabbing;
      }

      .Pen-header {
        display: flex;
        flex: 0 0 auto;
        max-height: 3rem;
        padding: 0.75rem;
        align-items: center;
      }

      .Pen-title {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }

      .Pen-previewLink svg {
        fill: $color-link;
        opacity: 0.75;
      }

      .Pen-previewLink:hover svg {
        opacity: 1;
      }

      .Pen-preview {
        flex: 0 0 auto;
        height: 100%;
        max-height: calc(100% - 3.75rem);
        width: 100%;
      }

      .Pen-handle--browser {
        display: block;
        pointer-events: all;
        visibility: visible;
      }

      .Pen-info {
        flex: 1 1 auto;
        position: relative;
        overflow: hidden;
        margin: $handle-size;
        margin-top: 0;
        border: 1px solid $color-frame-border;
      }

      .Browser-panel {
        flex: 1 1 auto;
        display: none;
        overflow: auto;
        width: 100%;
        background-color: #f6f6f6;
        padding: 0.75rem;
      }

      .Browser-panel.is-active {
        display: flex;
      }

      .hljs {
        display: block;
        overflow-x: auto;
        padding: 0.5em;
        color: #333;
        background: #f8f8f8; }

      .hljs-comment,
      .hljs-quote {
        color: #998;
        font-style: italic; }

      .hljs-keyword,
      .hljs-selector-tag,
      .hljs-subst {
        color: #333;
        font-weight: bold; }

      .hljs-number,
      .hljs-literal,
      .hljs-variable,
      .hljs-template-variable,
      .hljs-tag .hljs-attr {
        color: #008080; }

      .hljs-string,
      .hljs-doctag {
        color: #d14; }

      .hljs-title,
      .hljs-section,
      .hljs-selector-id {
        color: #900;
        font-weight: bold; }

      .hljs-subst {
        font-weight: normal; }

      .hljs-type,
      .hljs-class .hljs-title {
        color: #458;
        font-weight: bold; }

      .hljs-tag,
      .hljs-name,
      .hljs-attribute {
        color: #000080;
        font-weight: normal; }

      .hljs-regexp,
      .hljs-link {
        color: #009926; }

      .hljs-symbol,
      .hljs-bullet {
        color: #990073; }

      .hljs-built_in,
      .hljs-builtin-name {
        color: #0086b3; }

      .hljs-meta {
        color: #999;
        font-weight: bold; }

      .hljs-deletion {
        background: #fdd; }

      .hljs-addition {
        background: #dfd; }

      .hljs-emphasis {
        font-style: italic; }

      .hljs-strong {
        font-weight: bold; }
    </style>

      <div class="Pen-panel Pen-header">
        <h1 class="Pen-title">
          <a class="Pen-previewLink" href="{{ previewUrl }}" title="Component preview">
            {{ entity.title }}
            {% include "icons/open-in-browser.svg" %}
          </a>
        </h1>
      </div>

      {% if renderError -%}
        {{ renderError }}
      {% else %}
        <div class="Browser" data-behaviour="browser" id="browser-{{ entity.id }}">
          <nav class="dso-navbar">
            <div class="dso-navbar-header">
              <button type="button" class="dso-navbar-toggle">
                <svg class="di di-bars">
                  <use href="../../dso-icons.svg#bars" />
                </svg> <span class="sr-only">Ga naar menu</span>
              </button>
            </div>
            <ul class="dso-nav dso-nav-main">
              {% for panel in frctl
                .theme
                .get('panels') %}
                <li class="{% if loop.first %} is-active {% endif %}" data-role="tab">
                  <a href="#browser-{{ entity.id }}-panel-{{ panel }}">
                    {% if panel == 'html' %}HTML{% else %}{{ panel | capitalize }}
                    {% endif %}
                  </a>
                </li>
              {% endfor %}
            </ul>
          </nav>

          {% asyncAll panel in frctl
            .theme
            .get('panels') %}
          {% include 'partials/browser/panel-' + panel + '.nunj' %}
          {% endall %}

        </div>
      {%- endif %}

    {% endblock %}

  </div>

{% endblock %}
