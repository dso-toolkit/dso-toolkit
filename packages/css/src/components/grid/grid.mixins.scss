@use "sass:math";

@use "@dso-toolkit/sources/src/utilities";
@use "@dso-toolkit/sources/src/variables/media-query-breakpoints";

@use "grid.variables" as css-grid-variables;

@mixin full-width-row($gutter: 0) {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);

  @if ($gutter > 0) {
    padding-left: calc(50vw - 50% - #{math.ceil($gutter * 0.5)});
    padding-right: calc(50vw - 50% - #{math.floor($gutter * 0.5)});
  }
  @else {
    padding-left: calc(50vw - 50%);
    padding-right: calc(50vw - 50%);
  }
}

@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through css-grid-variables.$grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }

  #{$list} {
    position: relative;
    min-height: 1px; // Prevent columns from collapsing when empty
    padding-right: math.floor(css-grid-variables.$grid-gutter-width * 0.5);
    padding-left: math.ceil(css-grid-variables.$grid-gutter-width * 0.5);
  }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through css-grid-variables.$grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }

  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: math.percentage(math.div($index, css-grid-variables.$grid-columns));
    }
  }

  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: math.percentage(math.div($index, css-grid-variables.$grid-columns));
    }
  }

  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }

  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: math.percentage(math.div($index, css-grid-variables.$grid-columns));
    }
  }

  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }

  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: math.percentage(math.div($index, css-grid-variables.$grid-columns));
    }
  }
}

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}

@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns(css-grid-variables.$grid-columns, $class, width);
  @include loop-grid-columns(css-grid-variables.$grid-columns, $class, pull);
  @include loop-grid-columns(css-grid-variables.$grid-columns, $class, push);
  @include loop-grid-columns(css-grid-variables.$grid-columns, $class, offset);
}

@mixin container-fixed($gutter: css-grid-variables.$grid-gutter-width) {
  padding-right: math.ceil($gutter * 0.5);
  padding-left: math.floor($gutter * 0.5);
  margin-right: auto;
  margin-left: auto;

  @include utilities.clearfix();
}

@mixin make-row($gutter: css-grid-variables.$grid-gutter-width) {
  margin-right: math.floor(math.div($gutter, -2));
  margin-left: math.ceil(math.div($gutter, -2));

  @include utilities.clearfix();
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: css-grid-variables.$grid-gutter-width) {
  position: relative;
  min-height: 1px;
  padding-right: ($gutter * 0.5);
  padding-left: ($gutter * 0.5);

  @media (min-width: media-query-breakpoints.$screen-sm-min) {
    float: left;
    width: math.percentage(math.div($columns, css-grid-variables.$grid-columns));
  }
}
