@use "sass:map";
@use "sass:color";

@use "../../variables/colors";
@use "../../variables/states";
@use "../../components/link/link.variables" as link-variables;
@use "../../components/button/button.variables" as button-variables;
@use "../../di";

@use "../functions/contrast-color.functions" as contrast-color;

/// Automatically applies accessible (WCAG-compliant) text and UI colors based on a given background color.
///
/// This mixin determines an appropriate contrast color for text (`light` or `dark`)
/// and dynamically adjusts related colors for links, icons, alerts, and buttons
/// to ensure consistent readability and sufficient contrast across different backgrounds.
///
/// @mixin apply
/// @access public
///
/// @param {Color} $background-color - The background color used to determine text and accent contrast colors.
/// @param {String} $self - The context of the component using the mixin (e.g. `"alert"`, `"link"`, `"button"`).
///   This determines which color rules are skipped to avoid overriding component-specific styles.
///
/// @details
/// **Core behavior:**
/// - Uses `contrast-color.apply($background-color)` to compute a WCAG-compliant text color.
/// - For dark backgrounds, sets adjusted border, link, and icon colors.
/// - Applies context-specific variables depending on `$self`.

/// It sets the computed background and text color:
/// ```scss
/// background-color: $background-color;
/// color: $contrast-color;
/// ```
@mixin apply($background-color, $self) {
  & {
    // run contrast-color function to determine WCAG-compliant text color
    $contrast-color: contrast-color.apply($background-color);

    // set link and icon color according to text color
    @if color.channel($background-color, "lightness", $space: hsl) < 100% {
      @if $self != "alert" {
        --_dso-alert-success-border-on-dark-color: #{states.$success-compact-accent-color};
        --_dso-alert-error-border-on-dark-color: #{states.$danger-compact-accent-color};
        --_dso-alert-info-border-on-dark-color: #{states.$info-compact-accent-color};
        --_dso-alert-warning-border-on-dark-color: #{states.$warning-compact-accent-color};
      }

      @if $self != "link" {
        --link-color: currentColor;
        --link-hover-color: currentColor;
        --link-visited-color: currentColor;

        // set according to contrast color determined by contrast-color function
        $icon-color: if($contrast-color == colors.$contrast-dark, "zwart", "wit");

        @include _linkIconColors($icon-color);
      }

      @if $self != "button" {
        @if $contrast-color == colors.$contrast-dark {
          --_dso-icon-button-tertiary-color: #{colors.$grijs-90};
          --_dso-icon-button-tertiary-hover-color: #{colors.$grijs-70};
          --_dso-icon-button-tertiary-active-color: #{colors.$bosgroen-140};
          --_dso-icon-button-tertiary-disabled-color: #{colors.$grijs-40};
        } @else if $contrast-color == colors.$contrast-light {
          --_dso-icon-button-tertiary-color: #{colors.$wit};
        }
      }
    }

    // set css properties
    background-color: $background-color;
    color: $contrast-color;
  }
}

// ANCHOR ICON COLORS
// ==================
@mixin _linkIconColors($icon-color) {
  // loop through map to set icon mode
  @each $mode, $value in link-variables.$linkIcons {
    $selector: map.get($value, "selector");
    $icon: map.get($value, "icon") + "-" + $icon-color;

    a:not(#{button-variables.$buttons}):is(#{$selector}, #{$selector}:hover, #{$selector}:focus-visible) {
      // set icon color
      @include di.variant($icon);
    }
  }
}
