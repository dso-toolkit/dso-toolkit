@use "sass:map";
@use "sass:color";

@use "../../variables/colors";
@use "../../components/link/link.variables" as link-variables;
@use "../../components/button/button.variables" as button-variables;
@use "../../di";

@use "../functions/contrast-color.functions" as contrast-color;

// SET COLORS
// ==========
// USAGE: @include setColors($bgcolor, $bordercolor: transparent, $links: true);
// $background-color: background color of the element (required)
// $border-color: border color of the element (optional)
// $icons: boolean to set link icon colors according to background color (optional). set to false if you don't want to change the link icon colors.
// $links: boolean to set link colors according to background color (optional). set to false if you don't want to change the link colors.
// $reverse: in case the combination chosen by this mixin & contrast-color function still does not meet WCAG requirements, set $reverse to true. If this combination does not comply either, find another background-color.

@mixin apply($background-color, $border-color: null, $icons: true, $links: true, $reverse: false) {
  $icon-color: null;
  & {
    // run contrast-color function to determine WCAG-compliant text color
    $contrast-color: contrast-color.apply($background-color);
    $contrast-icon-color: #{contrast-color.apply($background-color, $icon: true)};

    // set link and icon color according to text color
    @if color.channel($background-color, "lightness", $space: hsl) < 100% {
      @if $links == true {
        --link-color: currentColor;
        --link-hover-color: currentColor;
        --link-visited-color: currentColor;
      }

      @debug $contrast-color == colors.$contrast-light;

      @if $contrast-color == colors.$contrast-dark {
        --icon-contrast-tertiary-color: #{colors.$grijs-90};
        --icon-contrast-tertiary-hover-color: #{colors.$grijs-70};
        --icon-contrast-tertiary-active-color: #{colors.$bosgroen-140};
        --icon-contrast-tertiary-disabled-color: #{colors.$grijs-40};
      } @else if $contrast-color == colors.$contrast-light {
        --icon-contrast-tertiary-color: #{colors.$wit};
      } @else {
        --icon-contrast-tertiary-color: #{$contrast-icon-color};
      }

      // set according to contrast color determined by contrast-color function
      @if $contrast-color == colors.$contrast-dark {
        $icon-color: "zwart";
      } @else if $contrast-color == colors.$contrast-light {
        $icon-color: "wit";
      }

      // if contrast-color function gets it wrong, and therefore $reverse is set to true
      @if $contrast-color == colors.$contrast-dark and $reverse == true {
        $icon-color: "wit";
        $contrast-color: colors.$contrast-light;
      } @else if $contrast-color == colors.$contrast-light and $reverse == true {
        $icon-color: "zwart";
        $contrast-color: colors.$contrast-dark;
      }
    }

    // set css properties
    background-color: $background-color;
    border-color: if($border-color, $border-color, $background-color);
    color: $contrast-color;

    // implement icon color according to background color
    @if $icon-color and $icons == true {
      @include _anchorIconColors($icon-color);
    }
  }
}

// ANCHOR ICON COLORS
// ==================
@mixin _anchorIconColors($icon-color) {
  // loop through map to set icon mode
  @each $mode, $value in link-variables.$linkIcons {
    $selector: map.get($value, "selector");
    $icon: map.get($value, "icon") + "-" + $icon-color;

    a:not(#{button-variables.$buttons}):is(#{$selector}, #{$selector}:hover, #{$selector}:focus-visible) {
      // set icon color
      @include di.variant($icon);
    }
  }
}
