/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionInternalState, AccordionVariant } from "./components/accordion/accordion.interfaces";
import { RenvooiValue } from "./components/renvooi/renvooi.interfaces";
import { AccordionHeading, AccordionSectionAnimationEndEvent, AccordionSectionAnimationStartEvent, AccordionSectionState, AccordionSectionToggleClickEvent, AccordionSectionWijzigactie } from "./components/accordion/components/accordion-section.interfaces";
import { LabelStatus } from "./components/label/label.interfaces";
import { AdvancedSelectChangeEvent, AdvancedSelectOption, AdvancedSelectOptionOrGroup, AdvancedSelectRedirectEvent } from "./components/advanced-select/advanced-select.interfaces";
import { AnnotationActiveChangeEvent, AnnotationWijzigactie } from "./components/annotation/annotation.interfaces";
import { AnnotationKaartClickEvent } from "./components/annotation/annotation-kaart/annotation-kaart.interfaces";
import { AutosuggestMarkFunction, Suggestion } from "./components/autosuggest/autosuggest.interfaces";
import { BadgeStatus } from "./components/badge/badge.interfaces";
import { CardClickEvent } from "./components/card/card.interfaces";
import { CardContainerMode } from "./components/card-container/card-container.interfaces";
import { DatePickerBlurEvent, DatePickerChangeEvent, DatePickerFocusEvent, DatePickerKeyboardEvent } from "./components/date-picker/date-picker.interfaces";
import { DsoDatePickerLegacyChangeEvent, DsoDatePickerLegacyDirection, DsoDatePickerLegacyFocusEvent, DsoDatePickerLegacyKeyboardEvent } from "./components/date-picker-legacy/date-picker-legacy.interfaces";
import { DocumentCardClickEvent } from "./components/document-card/document-card.interfaces";
import { DocumentComponentAnnotationsWijzigactie, DocumentComponentInputType, DocumentComponentMarkFunction, DocumentComponentMarkItemHighlightEvent, DocumentComponentMode, DocumentComponentOpenToggleEvent, DocumentComponentOzonContentAnchorClickEvent, DocumentComponentRecursiveToggleEvent, DocumentComponentRecursiveToggleState, DocumentComponentTableOfContentsClickEvent, DocumentComponentToggleAnnotationEvent, DocumentComponentWijzigactie } from "./components/document-component/document-component.models";
import { Placement } from "@popperjs/core";
import { ExpandableAnimationEndEvent, ExpandableAnimationStartEvent } from "./components/expandable/expandable";
import { HeaderEvent, HeaderMenuItem } from "./components/header/header.interfaces";
import { InfoButtonToggleEvent } from "./components/info-button/info-button.interfaces";
import { InputRangeChangeEvent } from "./components/input-range/input-range.interfaces";
import { LegendItemRemoveClickEvent } from "./components/legend-item/legend-item.interfaces";
import { ListButtonChangeEvent, ListButtonSelectedEvent } from "./components/list-button/list-button.interfaces";
import { LogoClickEvent, LogoLabelClickEvent } from "./components/logo/logo.interfaces";
import { BaseLayer, BaseLayerChangeEvent } from "./components/map-base-layers/map-base-layers.interfaces";
import { MapControlsToggleEvent } from "./components/map-controls/map-controls.interfaces";
import { Overlay, OverlayChangeEvent } from "./components/map-overlays/map-overlays.interfaces";
import { MarkBarClearEvent, MarkBarFocusOptions, MarkBarInputEvent, MarkBarPaginationEvent } from "./components/mark-bar/mark-bar.interfaces";
import { ModalCloseEvent } from "./components/modal/modal.interfaces";
import { OzonContentAnchorClickEvent, OzonContentInputType, OzonContentMarkFunction, OzonContentMarkItemHighlightEvent } from "./components/ozon-content/ozon-content.interfaces";
import { PaginationSelectPageEvent } from "./components/pagination/pagination.interfaces";
import { PanelCloseEvent } from "./components/panel/panel";
import { PlekinfoCardClickEvent, PlekinfoWijzigactie } from "./components/plekinfo-card/plekinfo-card.interfaces";
import { ResponsiveElementSize } from "./components/responsive-element/responsive-element.interfaces";
import { DsoScrollEndEvent } from "./components/scrollable/scrollable.interfaces";
import { SelectableChangeEvent } from "./components/selectable/selectable.interfaces";
import { SkiplinkClickEvent } from "./components/skiplink/skiplink.interfaces";
import { SlideToggleActiveEvent } from "./components/slide-toggle/slide-toggle.interfaces";
import { TabsSwitchEvent } from "./components/tabs/tabs.interfaces";
import { TreeViewItem, TreeViewPointerEvent } from "./components/tree-view/tree-view.interfaces";
import { ViewerGridActiveTabSwitchEvent, ViewerGridChangeSizeAnimationEndEvent, ViewerGridChangeSizeEvent, ViewerGridCloseOverlayEvent, ViewerGridFilterpanelApplyEvent, ViewerGridFilterpanelCancelEvent, ViewerGridMainExpandEvent, ViewerGridMainToggleEvent, ViewerGridMode, ViewerGridPanelSize, ViewerGridVdkTab, ViewerGridVrkTab } from "./components/viewer-grid/viewer-grid.interfaces";
export { AccordionInternalState, AccordionVariant } from "./components/accordion/accordion.interfaces";
export { RenvooiValue } from "./components/renvooi/renvooi.interfaces";
export { AccordionHeading, AccordionSectionAnimationEndEvent, AccordionSectionAnimationStartEvent, AccordionSectionState, AccordionSectionToggleClickEvent, AccordionSectionWijzigactie } from "./components/accordion/components/accordion-section.interfaces";
export { LabelStatus } from "./components/label/label.interfaces";
export { AdvancedSelectChangeEvent, AdvancedSelectOption, AdvancedSelectOptionOrGroup, AdvancedSelectRedirectEvent } from "./components/advanced-select/advanced-select.interfaces";
export { AnnotationActiveChangeEvent, AnnotationWijzigactie } from "./components/annotation/annotation.interfaces";
export { AnnotationKaartClickEvent } from "./components/annotation/annotation-kaart/annotation-kaart.interfaces";
export { AutosuggestMarkFunction, Suggestion } from "./components/autosuggest/autosuggest.interfaces";
export { BadgeStatus } from "./components/badge/badge.interfaces";
export { CardClickEvent } from "./components/card/card.interfaces";
export { CardContainerMode } from "./components/card-container/card-container.interfaces";
export { DatePickerBlurEvent, DatePickerChangeEvent, DatePickerFocusEvent, DatePickerKeyboardEvent } from "./components/date-picker/date-picker.interfaces";
export { DsoDatePickerLegacyChangeEvent, DsoDatePickerLegacyDirection, DsoDatePickerLegacyFocusEvent, DsoDatePickerLegacyKeyboardEvent } from "./components/date-picker-legacy/date-picker-legacy.interfaces";
export { DocumentCardClickEvent } from "./components/document-card/document-card.interfaces";
export { DocumentComponentAnnotationsWijzigactie, DocumentComponentInputType, DocumentComponentMarkFunction, DocumentComponentMarkItemHighlightEvent, DocumentComponentMode, DocumentComponentOpenToggleEvent, DocumentComponentOzonContentAnchorClickEvent, DocumentComponentRecursiveToggleEvent, DocumentComponentRecursiveToggleState, DocumentComponentTableOfContentsClickEvent, DocumentComponentToggleAnnotationEvent, DocumentComponentWijzigactie } from "./components/document-component/document-component.models";
export { Placement } from "@popperjs/core";
export { ExpandableAnimationEndEvent, ExpandableAnimationStartEvent } from "./components/expandable/expandable";
export { HeaderEvent, HeaderMenuItem } from "./components/header/header.interfaces";
export { InfoButtonToggleEvent } from "./components/info-button/info-button.interfaces";
export { InputRangeChangeEvent } from "./components/input-range/input-range.interfaces";
export { LegendItemRemoveClickEvent } from "./components/legend-item/legend-item.interfaces";
export { ListButtonChangeEvent, ListButtonSelectedEvent } from "./components/list-button/list-button.interfaces";
export { LogoClickEvent, LogoLabelClickEvent } from "./components/logo/logo.interfaces";
export { BaseLayer, BaseLayerChangeEvent } from "./components/map-base-layers/map-base-layers.interfaces";
export { MapControlsToggleEvent } from "./components/map-controls/map-controls.interfaces";
export { Overlay, OverlayChangeEvent } from "./components/map-overlays/map-overlays.interfaces";
export { MarkBarClearEvent, MarkBarFocusOptions, MarkBarInputEvent, MarkBarPaginationEvent } from "./components/mark-bar/mark-bar.interfaces";
export { ModalCloseEvent } from "./components/modal/modal.interfaces";
export { OzonContentAnchorClickEvent, OzonContentInputType, OzonContentMarkFunction, OzonContentMarkItemHighlightEvent } from "./components/ozon-content/ozon-content.interfaces";
export { PaginationSelectPageEvent } from "./components/pagination/pagination.interfaces";
export { PanelCloseEvent } from "./components/panel/panel";
export { PlekinfoCardClickEvent, PlekinfoWijzigactie } from "./components/plekinfo-card/plekinfo-card.interfaces";
export { ResponsiveElementSize } from "./components/responsive-element/responsive-element.interfaces";
export { DsoScrollEndEvent } from "./components/scrollable/scrollable.interfaces";
export { SelectableChangeEvent } from "./components/selectable/selectable.interfaces";
export { SkiplinkClickEvent } from "./components/skiplink/skiplink.interfaces";
export { SlideToggleActiveEvent } from "./components/slide-toggle/slide-toggle.interfaces";
export { TabsSwitchEvent } from "./components/tabs/tabs.interfaces";
export { TreeViewItem, TreeViewPointerEvent } from "./components/tree-view/tree-view.interfaces";
export { ViewerGridActiveTabSwitchEvent, ViewerGridChangeSizeAnimationEndEvent, ViewerGridChangeSizeEvent, ViewerGridCloseOverlayEvent, ViewerGridFilterpanelApplyEvent, ViewerGridFilterpanelCancelEvent, ViewerGridMainExpandEvent, ViewerGridMainToggleEvent, ViewerGridMode, ViewerGridPanelSize, ViewerGridVdkTab, ViewerGridVrkTab } from "./components/viewer-grid/viewer-grid.interfaces";
export namespace Components {
    interface DsoAccordion {
        "_getState": () => Promise<AccordionInternalState>;
        /**
          * Places the chevron at the opposite side.  Note: this mode does not display `state`, `attachmentCount` or `status` props on Accordion Sections
         */
        "reverseAlign": boolean;
        /**
          * The variant of the Accordion.
         */
        "variant": AccordionVariant;
    }
    interface DsoAccordionSection {
        /**
          * `attachmentCount` takes precedence over `icon`
         */
        "attachmentCount"?: number;
        /**
          * Calling this method will set focus to the handle.
         */
        "focusHandle": () => Promise<void>;
        /**
          * The title of the handle
         */
        "handleTitle": RenvooiValue | undefined;
        /**
          * When set the handle will render as a `<a>`. When undefined it renders as a `<button>`
         */
        "handleUrl"?: string;
        /**
          * Set when this Accordion Section contains or will contain an Accordion.
         */
        "hasNestedAccordion": boolean;
        /**
          * Which heading element to use.
         */
        "heading": AccordionHeading;
        /**
          * To set an icon in the heading handle.
         */
        "icon"?: string;
        /**
          * The label to be displayed in the heading handle inside a Label (optional)
         */
        "label"?: string;
        /**
          * The status of the Label in the heading handle (optional)
         */
        "labelStatus"?: LabelStatus;
        /**
          * Set the Accordion Section open.
         */
        "open": boolean;
        /**
          * `state` takes precedence over `attachmentCount` and `icon`
         */
        "status"?: AccordionSectionState;
        /**
          * The status of the section.
         */
        "statusDescription"?: string;
        /**
          * An optional 'wijzigactie' that signals if the contents of the section is added or removed.
         */
        "wijzigactie"?: AccordionSectionWijzigactie;
    }
    interface DsoActionList {
        /**
          * The title.
         */
        "listTitle": string;
    }
    interface DsoActionListItem {
        /**
          * Places a dashed line at the bottom of the item.
         */
        "divider": boolean;
        /**
          * Show flow line to next step
         */
        "flowLine": boolean;
        /**
          * The title of the item.
         */
        "itemTitle"?: string;
        /**
          * The step of the Action List Item.
         */
        "step": number;
        /**
          * When there is a warning.
         */
        "warning": boolean;
    }
    interface DsoAdvancedSelect {
        /**
          * The active option. By object reference.
         */
        "active"?: AdvancedSelectOption<never>;
        /**
          * An extra text for the active option. Only visible in the list of options.
         */
        "activeHint"?: string;
        /**
          * The options to display in the select.
         */
        "options": AdvancedSelectOptionOrGroup<never>[];
    }
    interface DsoAlert {
        /**
          * Show alert as compact variant (without icon)
         */
        "compact"?: boolean;
        /**
          * Whether or not to show the role attribute with value "alert". To control the tooltip add the `role-alert` attribute.
         */
        "roleAlert"?: boolean;
        /**
          * Set status of alert
         */
        "status": "success" | "info" | "warning" | "error";
    }
    interface DsoAnnotationActiviteit {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De noemer van de locatie.
         */
        "locatieNoemers"?: Array<RenvooiValue | string>;
        /**
          * De naam van de activiteit.
         */
        "naam"?: RenvooiValue | string;
        /**
          * De activiteit regel kwalificatie.
         */
        "regelKwalificatie"?: RenvooiValue | string;
        /**
          * Voorzetsel van de regelKwalificatie. Exclusief dubbele punt.
         */
        "regelKwalificatieVoorzetsel"?: string;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAnnotationGebiedsaanwijzing {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De naam van de gebiedsaanwijzing.
         */
        "naam"?: RenvooiValue | string;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAnnotationKaart {
        /**
          * De url naar de kaart.  Gebruik het event `dsoClick` om de navigatie aan de router te koppelen.
         */
        "href"?: string;
        /**
          * De naam van de kaart.
         */
        "naam"?: RenvooiValue | string;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie is toegevoegd of verwijderd.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAnnotationLocatie {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De noemer van de locatie.
         */
        "locatieNoemer"?: RenvooiValue | string;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    /**
     * Dit component wordt voor een Omgevingsnorm en Omgevingswaarde gebruikt.
     */
    interface DsoAnnotationOmgevingsnormwaarde {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * De eenheid van de omgevingsnorm of omgevingswaarde.
         */
        "eenheid"?: RenvooiValue | string;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De naam van de omgevingsnorm of omgevingswaarde.
         */
        "naam"?: RenvooiValue | string;
        /**
          * De toelichting van de waardes.
         */
        "toelichting"?: string;
        /**
          * De waardes van de omgevingsnorm of omgevingswaarde.
         */
        "waardes"?: Array<RenvooiValue | string>;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAttachmentsCounter {
        /**
          * The number of attachments.
         */
        "count": number;
    }
    interface DsoAutosuggest {
        /**
          * Shows progress indicator when fetching results.
         */
        "loading": boolean;
        /**
          * To delay progress indicator showing (in ms).
         */
        "loadingDelayed"?: number;
        /**
          * To override progress indicator's default loading label.
         */
        "loadingLabel"?: string;
        /**
          * A function provided by the consumer of the autosuggest component, that returns an array of `AutosuggestMarkItem`s
         */
        "mark"?: AutosuggestMarkFunction;
        /**
          * To show text when no results are found.
         */
        "notFoundLabel"?: string;
        /**
          * Whether the previous suggestions will be presented when the input gets focus again.
         */
        "suggestOnFocus": boolean;
        /**
          * The suggestions for the value of the slotted input element. Optionally a Suggestion can have a `type` and `item`.  The `type` is used to style the suggestion. `item` can be use to reference the original object that was used to create the suggestion.  The value should be null when no suggestions have been fetched.
         */
        "suggestions": Suggestion[] | null;
    }
    interface DsoBadge {
        /**
          * The status of the Badge.
         */
        "status"?: BadgeStatus;
    }
    interface DsoBanner {
        /**
          * compact mode.
         */
        "compact": boolean;
        /**
          * *Only available when `compact` is set to `true`.  Option to show banner icon.
         */
        "noIcon": boolean;
        /**
          * The status of the banner.
         */
        "status": "danger" | "error" | "info" | "warning";
    }
    interface DsoCard {
        /**
          * Makes the Card active.
         */
        "active"?: boolean;
        /**
          * The URL to which the Card heading links.
         */
        "href": string | undefined;
        /**
          * Display the link as an external link or a download link  - "download"  - "extern"
         */
        "mode"?: string;
    }
    interface DsoCardContainer {
        /**
          * The mode of the Card Container.
         */
        "mode": CardContainerMode;
    }
    interface DsoDatePicker {
        /**
          * ID of element that describes the input element
         */
        "describedBy"?: string;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Should the input be focused on load?
         */
        "dsoAutofocus": boolean;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier": string | undefined;
        /**
          * Is input invalid?
         */
        "invalid"?: boolean;
        /**
          * Maximum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the min property.
         */
        "max": string | undefined;
        /**
          * Minimum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the max property.
         */
        "min": string | undefined;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * Should the input be marked as required?
         */
        "required": boolean;
        /**
          * Date value. Must be in Dutch date format: DD-MM-YYYY.
         */
        "value": string;
    }
    interface DsoDatePickerLegacy {
        /**
          * ID of element that describes the input element
         */
        "describedBy"?: string;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction": DsoDatePickerLegacyDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Should the input be focused on load?
         */
        "dsoAutofocus": boolean;
        /**
          * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus returning to the date picker's button. Default is true.
         */
        "hide": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier": string | undefined;
        /**
          * Is input invalid?
         */
        "invalid"?: boolean;
        /**
          * Maximum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the min property.
         */
        "max": string | undefined;
        /**
          * Minimum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the max property.
         */
        "min": string | undefined;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * Should the input be marked as required?
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role": string | null;
        /**
          * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
         */
        "setFocus": () => Promise<void | undefined>;
        /**
          * Show the calendar modal, moving focus to the calendar inside.
         */
        "show": () => Promise<void>;
        /**
          * Date value. Must be in Dutch date format: DD-MM-YYYY.
         */
        "value": string;
    }
    interface DsoDocumentCard {
        /**
          * Makes the DocumentCard active.
         */
        "active"?: boolean;
        /**
          * The URL to which the DocumentCard heading links.
         */
        "href": string | undefined;
    }
    interface DsoDocumentComponent {
        /**
          * An alternative title to show when there is nothing to create a title.
         */
        "alternativeTitle"?: string;
        /**
          * Enables annotations.
         */
        "annotated": boolean;
        /**
          * The wijzigactie for all annotations.
         */
        "annotationsWijzigactie"?: DocumentComponentAnnotationsWijzigactie;
        /**
          * Marks as draft.
         */
        "bevatOntwerpInformatie": boolean;
        /**
          * Marks this Document Component as belonging to an active filter.
         */
        "filtered": boolean;
        /**
          * When a child Document Component has a status "Draft".
         */
        "genesteOntwerpInformatie": boolean;
        /**
          * Marks Document Component as reserved.
         */
        "gereserveerd": boolean;
        /**
          * The heading element to use.
         */
        "heading": "h2" | "h3" | "h4" | "h5" | "h6";
        /**
          * The URL to which the Heading links (only in mode="table-of-contents").
         */
        "href"?: string;
        /**
          * The Inhoud XML.
         */
        "inhoud"?: DocumentComponentInputType;
        /**
          * The Label XML.
         */
        "label"?: DocumentComponentInputType;
        /**
          * To mark text.
         */
        "mark"?: DocumentComponentMarkFunction;
        /**
          * The mode of the Document Component. One of "document" or "table-of-contents". Defaults to "document"
         */
        "mode": DocumentComponentMode;
        /**
          * Marks this Document Component as not-applicable.
         */
        "notApplicable": boolean;
        /**
          * The Nummer XML.
         */
        "nummer"?: DocumentComponentInputType;
        /**
          * This boolean attribute indicates whether the children are visible.
         */
        "open": boolean;
        /**
          * When the Annotation is opened, set this to true.
         */
        "openAnnotation": boolean;
        /**
          * The Opschrift XML.
         */
        "opschrift"?: DocumentComponentInputType;
        /**
          * Shows the recursive toggle button. When the user activates this button the event `dsoRecursiveToggle` is emitted.
         */
        "recursiveToggle": DocumentComponentRecursiveToggleState;
        /**
          * Type of Document Component.
         */
        "type"?: string;
        /**
          * Marks the Document Component as expired.
         */
        "vervallen": boolean;
        /**
          * The wijzigactie as in STOP.
         */
        "wijzigactie"?: DocumentComponentWijzigactie;
    }
    interface DsoDropdownMenu {
        /**
          * Selector for the element the dropdown options should not be overflowing.
         */
        "boundary"?: string;
        /**
          * Whether the menu is checkable.
         */
        "checkable": boolean;
        /**
          * Alignment of the dropdown
         */
        "dropdownAlign": "left" | "right";
        /**
          * Space between button and dropdown options
         */
        "dropdownOptionsOffset": number;
        /**
          * Whether the menu is open or closed. This attribute is reflected and mutable.
         */
        "open": boolean;
        /**
          * Force placement of dropdown.  This property overrides `dropdownAlign`.
         */
        "placement"?: Placement;
        /**
          * Set position strategy of dropdown options
         */
        "strategy": "auto" | "absolute" | "fixed";
    }
    interface DsoExpandable {
        /**
          * Set to `true` to show the content animated.
         */
        "enableAnimation": boolean;
        /**
          * When enableAnimation is set to `true`, this property specifies the height of this element at which the animation will expand from / collapse to
         */
        "minimumHeight"?: number;
        /**
          * Set to `true` to expand the content.
         */
        "open"?: boolean;
    }
    interface DsoHeader {
        /**
          * Used to show the login/logout option. 'none' renders nothing.
         */
        "authStatus": "none" | "loggedIn" | "loggedOut";
        /**
          * The URL to open when the user activates "help". If no URL is specified, a button element is used instead.
         */
        "helpUrl"?: string;
        /**
          * When the `authStatus` is `loggedOut` a loginUrl can be provided. The login button will then render as an anchor.
         */
        "loginUrl"?: string;
        /**
          * The URL to open when the user activates "logout". If no URL is specified, a button element is used instead.
         */
        "logoutUrl"?: string;
        /**
          * The main menu items.
         */
        "mainMenu"?: HeaderMenuItem[];
        /**
          * Show a help-button or link in the header
         */
        "showHelp"?: boolean | undefined;
        /**
          * Either have the dropdown menu appear automatically or always.
         */
        "useDropDownMenu": "always" | "auto";
        /**
          * Set this to true when the user is at "Mijn Omgevingsloket".
         */
        "userHomeActive"?: boolean;
        /**
          * The URL to open when the user activates "Mijn Omgevingsloket".
         */
        "userHomeUrl"?: string;
        /**
          * The name to show when the user is logged in.
         */
        "userProfileName"?: string;
        /**
          * The URL to open when the user activates the profile url.
         */
        "userProfileUrl"?: string;
    }
    interface DsoHelpcenterPanel {
        /**
          * The label on the help button that activates the Helpcenter.
         */
        "label": string;
        /**
          * The URL that's loaded when the Helpcenter opens.
         */
        "url": string;
    }
    interface DsoHighlightBox {
        /**
          * For a bordered Highlight Box.
         */
        "border"?: boolean;
        /**
          * For an Highlight Box with a drop shadow.
         */
        "dropShadow"?: boolean;
        /**
          * To create a step indicator.
         */
        "step"?: number;
        /**
          * For a while Highlight Box.
         */
        "white"?: boolean;
        /**
          * For yellow Highlight Box.
         */
        "yellow"?: boolean;
    }
    interface DsoIcon {
        /**
          * The alias of the icon.
         */
        "icon"?: string;
    }
    interface DsoImageOverlay {
        /**
          * The wijzigactie.
         */
        "wijzigactie"?: string;
    }
    interface DsoInfo {
        /**
          * Whether the Info is active.
         */
        "active"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "fixed"?: boolean;
    }
    interface DsoInfoButton {
        /**
          * Whether the InfoButton is active.
         */
        "active"?: boolean;
        /**
          * The label.
         */
        "label": string;
        /**
          * For secondary Info Button.
         */
        "secondary"?: boolean;
        /**
          * To set focus to the toggle button.
         */
        "setFocus": () => Promise<void>;
    }
    interface DsoInputRange {
        /**
          * The description of the range.
         */
        "description"?: string;
        /**
          * The label of the range.
         */
        "label"?: string;
        /**
          * The maximum value of the range.
         */
        "max"?: number;
        /**
          * The minimum value of the range.
         */
        "min"?: number;
        /**
          * The step to increment the value by.
         */
        "step"?: number;
        /**
          * The unit of the range.
         */
        "unit": string;
        /**
          * The value of the range.
         */
        "value"?: number;
    }
    interface DsoLabel {
        "_truncateLabel": () => Promise<void>;
        /**
          * For compact Label
         */
        "compact"?: boolean;
        /**
          * Shows a button that can be used to remove the Label.
         */
        "removable"?: boolean;
        /**
          * The status of this Label.
         */
        "status"?: LabelStatus;
        /**
          * Whether the Label is allowed to truncate the contents if it does not fit the container element.
         */
        "truncate"?: boolean;
    }
    interface DsoLegendItem {
        /**
          * To disable the Legend Item
         */
        "disabled": boolean;
        /**
          * Message to be shown behind a toggletip when the Legend Item is disabled
         */
        "disabledMessage"?: string;
        /**
          * Shows a trash-can that, when clicked, emits `dsoRemoveClick`.
         */
        "removable"?: boolean;
    }
    interface DsoListButton {
        /**
          * Whether the List Button is checked.
         */
        "checked": boolean;
        /**
          * When defined the count can show on the List Button.
         */
        "count"?: number;
        /**
          * Whether the List Button is disabled.
         */
        "disabled": boolean;
        /**
          * The label of the List Button.
         */
        "label"?: string;
        /**
          * Allow user to directly input a value.  Set to `false` to force users to use plus/minus buttons.
         */
        "manual": boolean;
        /**
          * The maximum value.
         */
        "max"?: string | number;
        /**
          * The minimum value.
         */
        "min"?: string | number;
        /**
          * Prefix to subcontent for the purpose of screenreading.
         */
        "subcontentPrefix"?: string;
        /**
          * The sublabel of the List Button.
         */
        "sublabel"?: string;
    }
    interface DsoLogo {
        /**
          * The label clarifies the service within the Omgevingsloket, shown as a subtitle (and on smaller screens as the main wordmark itself).
         */
        "label"?: string;
        /**
          * The url the label is pointing to.
         */
        "labelUrl"?: string;
        /**
          * The url the logo is pointing to.
         */
        "logoUrl"?: string;
        /**
          * An alternative name for the logo wordmark Omgevingsloket. For instance `Environment| Desk`. It should contains a pipe-character: the left-hand side of the pipe will be shown in grasgroen, the right-hand side of the pipe will be shown in bosgroen. When omitted the logo wordmark will default to Omgevingsloket, with 'Omgevings' shown in grasgroen and 'loket' in bosgroen.
         */
        "name": string;
        /**
          * The ribbon contains the text for a possible 'sticker' on top of the logo. Used to clarify the (non-production) server environment ("int", "kta", "pfm", "pre", or "dmo")
         */
        "ribbon"?: string;
    }
    interface DsoMapBaseLayers {
        /**
          * The base layers.
         */
        "baseLayers": BaseLayer[];
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group": string;
    }
    interface DsoMapControls {
        /**
          * To disable the zoom controls:  * `in`: Disable zoom in button. * `out`: Disable zoom out button. * `both`: Disable zoom in and zoom out.
         */
        "disableZoom"?: "in" | "out" | "both";
        /**
          * To show and hide the Map Controls.
         */
        "open": boolean;
        /**
          * Emitted when the visibility is toggled.  Can be used to recalculate map widths or reposition center when the Map Controls opens or closes.
          * @param e
         */
        "toggleVisibility": (e: MouseEvent | KeyboardEvent) => Promise<void>;
    }
    interface DsoMapOverlays {
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group": string;
        /**
          * The overlays.
         */
        "overlays": Overlay[];
    }
    interface DsoMarkBar {
        /**
          * The current (one-based) highlighted search item.
         */
        "current"?: number;
        /**
          * Focuses the input field.
         */
        "dsoFocus": (options?: MarkBarFocusOptions) => Promise<void>;
        /**
          * The label for the input field.
         */
        "label": string;
        /**
          * Total number of search results.
         */
        "totalCount"?: number;
        /**
          * The current search value.
         */
        "value"?: string;
    }
    interface DsoModal {
        /**
          * the role for the modal `dialog` | `alert` | `alertdialog`.
         */
        "dialogRole": string | null;
        /**
          * when set the modal will be shown in fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * The title of the Modal.
         */
        "modalTitle"?: string;
        /**
          * The element to return focus to after the modal is closed.  * `undefined` will return focus to the previously focused element (default). * `false` will not return focus to any element. * or, provide your own `HTMLElement` that will receive focus upon closing.
         */
        "returnFocus": false | HTMLElement | undefined;
        /**
          * when `false` the close button in the header will not be rendered. Defaults to `true`.  Needs `modalTitle` to be set.
         */
        "showCloseButton": boolean;
    }
    interface DsoOzonContent {
        /**
          * The XML to be rendered.
         */
        "content"?: OzonContentInputType;
        /**
          * Setting this property creates dso-ozon-content as inline element instead of a block element.
         */
        "inline": boolean;
        /**
          * To mark text.
         */
        "mark"?: OzonContentMarkFunction;
    }
    interface DsoPagination {
        /**
          * Current page
         */
        "currentPage"?: number;
        /**
          * This function is called to format the href
         */
        "formatHref": (page: number) => string;
        /**
          * Total pages
         */
        "totalPages"?: number;
    }
    interface DsoPanel {
    }
    interface DsoPlekinfoCard {
        /**
          * Makes the PlekinfoCard active.
         */
        "active"?: boolean;
        /**
          * The URL to which the PlekinfoCard heading links.
         */
        "href": string | undefined;
        /**
          * Opens the urls in a new window or tab
         */
        "targetBlank": boolean;
        /**
          * An optional 'wijzigactie' that signals if the plekinfo on the card is added or removed.
         */
        "wijzigactie"?: PlekinfoWijzigactie;
    }
    interface DsoProgressBar {
        /**
          * When the operation completes.
         */
        "max": number;
        /**
          * From where progress is made.
         */
        "min": number;
        /**
          * The current progress. Should be between `min` and `max`.
         */
        "progress": number;
    }
    interface DsoProgressIndicator {
        /**
          * Set for bloatier Progress Indicator.
         */
        "block"?: boolean;
        /**
          * The label of the Progress Indicator.
         */
        "label"?: string;
        /**
          * The size (width) of the Progress Indicator.  If no size is set, falls back to `small`.
         */
        "size"?: "small" | "medium" | "large";
    }
    interface DsoProjectItem {
        /**
          * The label of the project item.
         */
        "label"?: string;
    }
    /**
     * Met dit component kan een `RenvooiValue` worden gepresenteerd.
     */
    interface DsoRenvooi {
        /**
          * The renvooi value to render.
         */
        "value"?: RenvooiValue | RenvooiValue[];
    }
    interface DsoResponsiveElement {
        /**
          * The current size
         */
        "getSize": () => Promise<ResponsiveElementSize>;
    }
    interface DsoScrollable {
        "_setScrollState": () => Promise<void>;
    }
    interface DsoSelectable {
        /**
          * Mark the Selectable as checked
         */
        "checked"?: boolean;
        /**
          * To link this control to an element that describes it.
         */
        "describedById"?: string;
        /**
          * To disable the Selectable.
         */
        "disabled"?: boolean;
        /**
          * To set `<input id>` attribute for external references.
         */
        "identifier"?: string;
        /**
          * An indeterminate state is neither true or false. It means the answer is somewhere in between.  Can be used to indicate child Selectables that are a mix of checked and unchecked.
         */
        "indeterminate"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "infoFixed"?: boolean;
        /**
          * Set to true of the current value is not valid.
         */
        "invalid"?: boolean;
        /**
          * To link this control to an element that labels it.
         */
        "labelledById"?: string;
        /**
          * Name of the Selectable. Can be used to group Selectables.
         */
        "name"?: string;
        /**
          * To mark the Selectable as required.
         */
        "required"?: boolean;
        /**
          * Method to toggle the Info. Is set to `active` when passed.  If `active` is not passed, Info is toggled to opposite value.
          * @param active
         */
        "toggleInfo": (active?: boolean) => Promise<void>;
        /**
          * Type of Selectable.  `checkbox`: Multiple options `radio`: Single option.
         */
        "type": "checkbox" | "radio";
        /**
          * The value of the Selectable.
         */
        "value": string;
    }
    interface DsoSkiplink {
        /**
          * link text
         */
        "label": string | undefined;
        /**
          * The location to which the skiplink links.
         */
        "to": string | undefined;
    }
    interface DsoSlideToggle {
        /**
          * When provided the `<button>` will be labelled with `aria-label`. For a visible label provide a `<span>` inside the component.
         */
        "accessibleLabel"?: string;
        /**
          * Set to true if Slide Toggle is checked.
         */
        "checked": boolean;
        /**
          * Disables the Slide Toggle, preventing it from checking/unchecking and therefor not emitting any events.
         */
        "disabled": boolean;
        /**
          * Provide an `id` for the `<button>`. Useful for placing your to place your own `<label for="id">`.
         */
        "identifier": string;
        /**
          * Provide the `id` of the element that labels this element. this property sets the `aria-labelledby` on the switch button.
         */
        "labelledbyId"?: string;
    }
    interface DsoTab {
        "_dsoFocus": () => Promise<void>;
        /**
          * Makes the tab active. The tab for which the tabpanel is visible is the active tab.
         */
        "active"?: boolean;
        /**
          * Disables the tab. A disabled tab cannot be activated and it's tabpanel cannot be shown.
         */
        "disabled"?: boolean;
        /**
          * The optional href of the tab. Creates an anchor if present. Creates a button if absent.
         */
        "href"?: string;
    }
    interface DsoTable {
        /**
          * Indicates whether the table is currently horizontally scrollable.
         */
        "isResponsive": boolean;
        /**
          * Prevents the table being opened in a modal.
         */
        "noModal": boolean;
    }
    interface DsoTabs {
    }
    interface DsoToggletip {
        /**
          * Toggletip label.
         */
        "label": string;
        /**
          * Toggletip position.
         */
        "position": Placement;
        /**
          * Set to true for secondary Toggletip.
         */
        "secondary"?: boolean;
        /**
          * Set to true for small Toggletip.
         */
        "small"?: boolean;
    }
    interface DsoTooltip {
        /**
          * Activate the tooltip (Sets the `active` attribute)
         */
        "activate": () => Promise<void>;
        /**
          * Whether or not to show the tooltip. To control the tooltip add the `active` attribute or use the `activate()` and `deactivate()` instance methods.
         */
        "active": boolean;
        /**
          * Deactivate the tooltip (Removes the `active` attribute)
         */
        "deactivate": () => Promise<void>;
        /**
          * Defines if the tooltip is descriptive. A descriptive tooltip contains a meaningful message. Tooltips that are not descriptive are hidden from screenreaders using `aria-hidden`.
         */
        "descriptive": boolean;
        /**
          * Set attribute `no-arrow` to hide the arrow
         */
        "noArrow": boolean;
        /**
          * Set position of tooltip relative to target
         */
        "position": Placement;
        /**
          * Defines if the tooltip has a smaller max-width
         */
        "small"?: boolean;
        /**
          * Deactivates mouseover behaviour
         */
        "stateless"?: boolean;
        /**
          * Set position strategy of tooltip
         */
        "strategy": "auto" | "absolute" | "fixed";
    }
    interface DsoTreeView {
        /**
          * The collection of TreeViewItems
         */
        "collection": TreeViewItem[];
        /**
          * Set focus on the last item in the specified path. The consumer is responsible for providing a TreeView collection where the last item is visible.
          * @async 
          * @returns Whether the item was found.
         */
        "focusItem": (path: TreeViewItem[]) => Promise<boolean>;
    }
    interface DsoViewerGrid {
        "_checkMainPanelVisibility": () => Promise<void>;
        /**
          * Set active tab in tab view.
         */
        "activeTab"?: ViewerGridVdkTab | ViewerGridVrkTab;
        /**
          * **VDK only.** Set to true when document panel should show.
         */
        "documentPanelOpen": boolean;
        /**
          * **VDK only.** Size of the panel when component loads.  Default size is `large`.
         */
        "documentPanelSize": ViewerGridPanelSize;
        /**
          * Set to true when filterpanel should show.
         */
        "filterpanelOpen": boolean;
        /**
          * **VDK only.** Set to show main panel expanded.
         */
        "mainPanelExpanded": boolean;
        /**
          * **VDK only.** Set to hide the main panel.
         */
        "mainPanelHidden": boolean;
        /**
          * Size of the panel when component loads.  Default size is `large`.
         */
        "mainSize": ViewerGridPanelSize;
        /**
          * VRK or VDK implementation.
         */
        "mode": ViewerGridMode;
        /**
          * Set to true when overlay should show.
         */
        "overlayOpen": boolean;
    }
    interface DsotDocumentComponentDemo {
        /**
          * Name of the file to load.
         */
        "jsonFile"?: string;
        /**
          * The mode of the Document Component. One of "document" or "table-of-contents". Defaults to "document"
         */
        "mode": DocumentComponentMode;
        /**
          * The default state for all Document Components.
         */
        "openDefault": boolean;
        /**
          * Show canvas to where Document Component extends.
         */
        "showCanvas": boolean;
    }
}
export interface DsoAccordionSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAccordionSectionElement;
}
export interface DsoAdvancedSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAdvancedSelectElement;
}
export interface DsoAnnotationActiviteitCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationActiviteitElement;
}
export interface DsoAnnotationGebiedsaanwijzingCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationGebiedsaanwijzingElement;
}
export interface DsoAnnotationKaartCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationKaartElement;
}
export interface DsoAnnotationLocatieCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationLocatieElement;
}
export interface DsoAnnotationOmgevingsnormwaardeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationOmgevingsnormwaardeElement;
}
export interface DsoAutosuggestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAutosuggestElement;
}
export interface DsoCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoCardElement;
}
export interface DsoDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoDatePickerElement;
}
export interface DsoDatePickerLegacyCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoDatePickerLegacyElement;
}
export interface DsoDocumentCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoDocumentCardElement;
}
export interface DsoDocumentComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoDocumentComponentElement;
}
export interface DsoExpandableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoExpandableElement;
}
export interface DsoHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoHeaderElement;
}
export interface DsoInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoInfoElement;
}
export interface DsoInfoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoInfoButtonElement;
}
export interface DsoInputRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoInputRangeElement;
}
export interface DsoLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoLabelElement;
}
export interface DsoLegendItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoLegendItemElement;
}
export interface DsoListButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoListButtonElement;
}
export interface DsoLogoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoLogoElement;
}
export interface DsoMapBaseLayersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMapBaseLayersElement;
}
export interface DsoMapControlsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMapControlsElement;
}
export interface DsoMapOverlaysCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMapOverlaysElement;
}
export interface DsoMarkBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMarkBarElement;
}
export interface DsoModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoModalElement;
}
export interface DsoOzonContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoOzonContentElement;
}
export interface DsoPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoPaginationElement;
}
export interface DsoPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoPanelElement;
}
export interface DsoPlekinfoCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoPlekinfoCardElement;
}
export interface DsoResponsiveElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoResponsiveElementElement;
}
export interface DsoScrollableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoScrollableElement;
}
export interface DsoSelectableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoSelectableElement;
}
export interface DsoSkiplinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoSkiplinkElement;
}
export interface DsoSlideToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoSlideToggleElement;
}
export interface DsoTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoTabElement;
}
export interface DsoTreeViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoTreeViewElement;
}
export interface DsoViewerGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoViewerGridElement;
}
export interface DsotDocumentComponentDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsotDocumentComponentDemoElement;
}
declare global {
    interface HTMLDsoAccordionElement extends Components.DsoAccordion, HTMLStencilElement {
    }
    var HTMLDsoAccordionElement: {
        prototype: HTMLDsoAccordionElement;
        new (): HTMLDsoAccordionElement;
    };
    interface HTMLDsoAccordionSectionElementEventMap {
        "dsoToggleClick": AccordionSectionToggleClickEvent;
        "dsoAnimationStart": AccordionSectionAnimationStartEvent;
        "dsoAnimationEnd": AccordionSectionAnimationEndEvent;
    }
    interface HTMLDsoAccordionSectionElement extends Components.DsoAccordionSection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAccordionSectionElementEventMap>(type: K, listener: (this: HTMLDsoAccordionSectionElement, ev: DsoAccordionSectionCustomEvent<HTMLDsoAccordionSectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAccordionSectionElementEventMap>(type: K, listener: (this: HTMLDsoAccordionSectionElement, ev: DsoAccordionSectionCustomEvent<HTMLDsoAccordionSectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAccordionSectionElement: {
        prototype: HTMLDsoAccordionSectionElement;
        new (): HTMLDsoAccordionSectionElement;
    };
    interface HTMLDsoActionListElement extends Components.DsoActionList, HTMLStencilElement {
    }
    var HTMLDsoActionListElement: {
        prototype: HTMLDsoActionListElement;
        new (): HTMLDsoActionListElement;
    };
    interface HTMLDsoActionListItemElement extends Components.DsoActionListItem, HTMLStencilElement {
    }
    var HTMLDsoActionListItemElement: {
        prototype: HTMLDsoActionListItemElement;
        new (): HTMLDsoActionListItemElement;
    };
    interface HTMLDsoAdvancedSelectElementEventMap {
        "dsoChange": AdvancedSelectChangeEvent<never>;
        "dsoRedirect": AdvancedSelectRedirectEvent;
    }
    interface HTMLDsoAdvancedSelectElement extends Components.DsoAdvancedSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAdvancedSelectElementEventMap>(type: K, listener: (this: HTMLDsoAdvancedSelectElement, ev: DsoAdvancedSelectCustomEvent<HTMLDsoAdvancedSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAdvancedSelectElementEventMap>(type: K, listener: (this: HTMLDsoAdvancedSelectElement, ev: DsoAdvancedSelectCustomEvent<HTMLDsoAdvancedSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAdvancedSelectElement: {
        prototype: HTMLDsoAdvancedSelectElement;
        new (): HTMLDsoAdvancedSelectElement;
    };
    interface HTMLDsoAlertElement extends Components.DsoAlert, HTMLStencilElement {
    }
    var HTMLDsoAlertElement: {
        prototype: HTMLDsoAlertElement;
        new (): HTMLDsoAlertElement;
    };
    interface HTMLDsoAnnotationActiviteitElementEventMap {
        "dsoActiveChange": AnnotationActiveChangeEvent;
    }
    interface HTMLDsoAnnotationActiviteitElement extends Components.DsoAnnotationActiviteit, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAnnotationActiviteitElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationActiviteitElement, ev: DsoAnnotationActiviteitCustomEvent<HTMLDsoAnnotationActiviteitElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAnnotationActiviteitElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationActiviteitElement, ev: DsoAnnotationActiviteitCustomEvent<HTMLDsoAnnotationActiviteitElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAnnotationActiviteitElement: {
        prototype: HTMLDsoAnnotationActiviteitElement;
        new (): HTMLDsoAnnotationActiviteitElement;
    };
    interface HTMLDsoAnnotationGebiedsaanwijzingElementEventMap {
        "dsoActiveChange": AnnotationActiveChangeEvent;
    }
    interface HTMLDsoAnnotationGebiedsaanwijzingElement extends Components.DsoAnnotationGebiedsaanwijzing, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAnnotationGebiedsaanwijzingElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationGebiedsaanwijzingElement, ev: DsoAnnotationGebiedsaanwijzingCustomEvent<HTMLDsoAnnotationGebiedsaanwijzingElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAnnotationGebiedsaanwijzingElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationGebiedsaanwijzingElement, ev: DsoAnnotationGebiedsaanwijzingCustomEvent<HTMLDsoAnnotationGebiedsaanwijzingElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAnnotationGebiedsaanwijzingElement: {
        prototype: HTMLDsoAnnotationGebiedsaanwijzingElement;
        new (): HTMLDsoAnnotationGebiedsaanwijzingElement;
    };
    interface HTMLDsoAnnotationKaartElementEventMap {
        "dsoClick": AnnotationKaartClickEvent;
    }
    interface HTMLDsoAnnotationKaartElement extends Components.DsoAnnotationKaart, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAnnotationKaartElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationKaartElement, ev: DsoAnnotationKaartCustomEvent<HTMLDsoAnnotationKaartElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAnnotationKaartElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationKaartElement, ev: DsoAnnotationKaartCustomEvent<HTMLDsoAnnotationKaartElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAnnotationKaartElement: {
        prototype: HTMLDsoAnnotationKaartElement;
        new (): HTMLDsoAnnotationKaartElement;
    };
    interface HTMLDsoAnnotationLocatieElementEventMap {
        "dsoActiveChange": AnnotationActiveChangeEvent;
    }
    interface HTMLDsoAnnotationLocatieElement extends Components.DsoAnnotationLocatie, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAnnotationLocatieElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationLocatieElement, ev: DsoAnnotationLocatieCustomEvent<HTMLDsoAnnotationLocatieElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAnnotationLocatieElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationLocatieElement, ev: DsoAnnotationLocatieCustomEvent<HTMLDsoAnnotationLocatieElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAnnotationLocatieElement: {
        prototype: HTMLDsoAnnotationLocatieElement;
        new (): HTMLDsoAnnotationLocatieElement;
    };
    interface HTMLDsoAnnotationOmgevingsnormwaardeElementEventMap {
        "dsoActiveChange": AnnotationActiveChangeEvent;
    }
    /**
     * Dit component wordt voor een Omgevingsnorm en Omgevingswaarde gebruikt.
     */
    interface HTMLDsoAnnotationOmgevingsnormwaardeElement extends Components.DsoAnnotationOmgevingsnormwaarde, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAnnotationOmgevingsnormwaardeElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationOmgevingsnormwaardeElement, ev: DsoAnnotationOmgevingsnormwaardeCustomEvent<HTMLDsoAnnotationOmgevingsnormwaardeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAnnotationOmgevingsnormwaardeElementEventMap>(type: K, listener: (this: HTMLDsoAnnotationOmgevingsnormwaardeElement, ev: DsoAnnotationOmgevingsnormwaardeCustomEvent<HTMLDsoAnnotationOmgevingsnormwaardeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAnnotationOmgevingsnormwaardeElement: {
        prototype: HTMLDsoAnnotationOmgevingsnormwaardeElement;
        new (): HTMLDsoAnnotationOmgevingsnormwaardeElement;
    };
    interface HTMLDsoAttachmentsCounterElement extends Components.DsoAttachmentsCounter, HTMLStencilElement {
    }
    var HTMLDsoAttachmentsCounterElement: {
        prototype: HTMLDsoAttachmentsCounterElement;
        new (): HTMLDsoAttachmentsCounterElement;
    };
    interface HTMLDsoAutosuggestElementEventMap {
        "dsoSelect": Suggestion;
        "dsoChange": string;
        "dsoSearch": string;
    }
    interface HTMLDsoAutosuggestElement extends Components.DsoAutosuggest, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoAutosuggestElementEventMap>(type: K, listener: (this: HTMLDsoAutosuggestElement, ev: DsoAutosuggestCustomEvent<HTMLDsoAutosuggestElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoAutosuggestElementEventMap>(type: K, listener: (this: HTMLDsoAutosuggestElement, ev: DsoAutosuggestCustomEvent<HTMLDsoAutosuggestElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoAutosuggestElement: {
        prototype: HTMLDsoAutosuggestElement;
        new (): HTMLDsoAutosuggestElement;
    };
    interface HTMLDsoBadgeElement extends Components.DsoBadge, HTMLStencilElement {
    }
    var HTMLDsoBadgeElement: {
        prototype: HTMLDsoBadgeElement;
        new (): HTMLDsoBadgeElement;
    };
    interface HTMLDsoBannerElement extends Components.DsoBanner, HTMLStencilElement {
    }
    var HTMLDsoBannerElement: {
        prototype: HTMLDsoBannerElement;
        new (): HTMLDsoBannerElement;
    };
    interface HTMLDsoCardElementEventMap {
        "dsoCardClick": CardClickEvent;
    }
    interface HTMLDsoCardElement extends Components.DsoCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoCardElementEventMap>(type: K, listener: (this: HTMLDsoCardElement, ev: DsoCardCustomEvent<HTMLDsoCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoCardElementEventMap>(type: K, listener: (this: HTMLDsoCardElement, ev: DsoCardCustomEvent<HTMLDsoCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoCardElement: {
        prototype: HTMLDsoCardElement;
        new (): HTMLDsoCardElement;
    };
    interface HTMLDsoCardContainerElement extends Components.DsoCardContainer, HTMLStencilElement {
    }
    var HTMLDsoCardContainerElement: {
        prototype: HTMLDsoCardContainerElement;
        new (): HTMLDsoCardContainerElement;
    };
    interface HTMLDsoDatePickerElementEventMap {
        "dsoDateChange": DatePickerChangeEvent;
        "dsoBlur": DatePickerBlurEvent;
        "dsoKeyUp": DatePickerKeyboardEvent;
        "dsoKeyDown": DatePickerKeyboardEvent;
        "dsoFocus": DatePickerFocusEvent;
    }
    interface HTMLDsoDatePickerElement extends Components.DsoDatePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoDatePickerElementEventMap>(type: K, listener: (this: HTMLDsoDatePickerElement, ev: DsoDatePickerCustomEvent<HTMLDsoDatePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoDatePickerElementEventMap>(type: K, listener: (this: HTMLDsoDatePickerElement, ev: DsoDatePickerCustomEvent<HTMLDsoDatePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoDatePickerElement: {
        prototype: HTMLDsoDatePickerElement;
        new (): HTMLDsoDatePickerElement;
    };
    interface HTMLDsoDatePickerLegacyElementEventMap {
        "dsoDateChange": DsoDatePickerLegacyChangeEvent;
        "dsoBlur": DsoDatePickerLegacyFocusEvent;
        "dsoKeyUp": DsoDatePickerLegacyKeyboardEvent;
        "dsoKeyDown": DsoDatePickerLegacyKeyboardEvent;
        "dsoFocus": DsoDatePickerLegacyFocusEvent;
    }
    interface HTMLDsoDatePickerLegacyElement extends Components.DsoDatePickerLegacy, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoDatePickerLegacyElementEventMap>(type: K, listener: (this: HTMLDsoDatePickerLegacyElement, ev: DsoDatePickerLegacyCustomEvent<HTMLDsoDatePickerLegacyElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoDatePickerLegacyElementEventMap>(type: K, listener: (this: HTMLDsoDatePickerLegacyElement, ev: DsoDatePickerLegacyCustomEvent<HTMLDsoDatePickerLegacyElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoDatePickerLegacyElement: {
        prototype: HTMLDsoDatePickerLegacyElement;
        new (): HTMLDsoDatePickerLegacyElement;
    };
    interface HTMLDsoDocumentCardElementEventMap {
        "dsoDocumentCardClick": DocumentCardClickEvent;
    }
    interface HTMLDsoDocumentCardElement extends Components.DsoDocumentCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoDocumentCardElementEventMap>(type: K, listener: (this: HTMLDsoDocumentCardElement, ev: DsoDocumentCardCustomEvent<HTMLDsoDocumentCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoDocumentCardElementEventMap>(type: K, listener: (this: HTMLDsoDocumentCardElement, ev: DsoDocumentCardCustomEvent<HTMLDsoDocumentCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoDocumentCardElement: {
        prototype: HTMLDsoDocumentCardElement;
        new (): HTMLDsoDocumentCardElement;
    };
    interface HTMLDsoDocumentComponentElementEventMap {
        "dsoRecursiveToggle": DocumentComponentRecursiveToggleEvent;
        "dsoOpenToggle": DocumentComponentOpenToggleEvent;
        "dsoTableOfContentsClick": DocumentComponentTableOfContentsClickEvent;
        "dsoOzonContentAnchorClick": DocumentComponentOzonContentAnchorClickEvent;
        "dsoAnnotationToggle": DocumentComponentToggleAnnotationEvent;
        "dsoMarkItemHighlight": DocumentComponentMarkItemHighlightEvent;
    }
    interface HTMLDsoDocumentComponentElement extends Components.DsoDocumentComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoDocumentComponentElementEventMap>(type: K, listener: (this: HTMLDsoDocumentComponentElement, ev: DsoDocumentComponentCustomEvent<HTMLDsoDocumentComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoDocumentComponentElementEventMap>(type: K, listener: (this: HTMLDsoDocumentComponentElement, ev: DsoDocumentComponentCustomEvent<HTMLDsoDocumentComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoDocumentComponentElement: {
        prototype: HTMLDsoDocumentComponentElement;
        new (): HTMLDsoDocumentComponentElement;
    };
    interface HTMLDsoDropdownMenuElement extends Components.DsoDropdownMenu, HTMLStencilElement {
    }
    var HTMLDsoDropdownMenuElement: {
        prototype: HTMLDsoDropdownMenuElement;
        new (): HTMLDsoDropdownMenuElement;
    };
    interface HTMLDsoExpandableElementEventMap {
        "dsoExpandableAnimationStart": ExpandableAnimationStartEvent;
        "dsoExpandableAnimationEnd": ExpandableAnimationEndEvent;
    }
    interface HTMLDsoExpandableElement extends Components.DsoExpandable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoExpandableElementEventMap>(type: K, listener: (this: HTMLDsoExpandableElement, ev: DsoExpandableCustomEvent<HTMLDsoExpandableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoExpandableElementEventMap>(type: K, listener: (this: HTMLDsoExpandableElement, ev: DsoExpandableCustomEvent<HTMLDsoExpandableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoExpandableElement: {
        prototype: HTMLDsoExpandableElement;
        new (): HTMLDsoExpandableElement;
    };
    interface HTMLDsoHeaderElementEventMap {
        "dsoHeaderClick": HeaderEvent;
    }
    interface HTMLDsoHeaderElement extends Components.DsoHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoHeaderElementEventMap>(type: K, listener: (this: HTMLDsoHeaderElement, ev: DsoHeaderCustomEvent<HTMLDsoHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoHeaderElementEventMap>(type: K, listener: (this: HTMLDsoHeaderElement, ev: DsoHeaderCustomEvent<HTMLDsoHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoHeaderElement: {
        prototype: HTMLDsoHeaderElement;
        new (): HTMLDsoHeaderElement;
    };
    interface HTMLDsoHelpcenterPanelElement extends Components.DsoHelpcenterPanel, HTMLStencilElement {
    }
    var HTMLDsoHelpcenterPanelElement: {
        prototype: HTMLDsoHelpcenterPanelElement;
        new (): HTMLDsoHelpcenterPanelElement;
    };
    interface HTMLDsoHighlightBoxElement extends Components.DsoHighlightBox, HTMLStencilElement {
    }
    var HTMLDsoHighlightBoxElement: {
        prototype: HTMLDsoHighlightBoxElement;
        new (): HTMLDsoHighlightBoxElement;
    };
    interface HTMLDsoIconElement extends Components.DsoIcon, HTMLStencilElement {
    }
    var HTMLDsoIconElement: {
        prototype: HTMLDsoIconElement;
        new (): HTMLDsoIconElement;
    };
    interface HTMLDsoImageOverlayElement extends Components.DsoImageOverlay, HTMLStencilElement {
    }
    var HTMLDsoImageOverlayElement: {
        prototype: HTMLDsoImageOverlayElement;
        new (): HTMLDsoImageOverlayElement;
    };
    interface HTMLDsoInfoElementEventMap {
        "dsoClose": MouseEvent;
    }
    interface HTMLDsoInfoElement extends Components.DsoInfo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoInfoElementEventMap>(type: K, listener: (this: HTMLDsoInfoElement, ev: DsoInfoCustomEvent<HTMLDsoInfoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoInfoElementEventMap>(type: K, listener: (this: HTMLDsoInfoElement, ev: DsoInfoCustomEvent<HTMLDsoInfoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoInfoElement: {
        prototype: HTMLDsoInfoElement;
        new (): HTMLDsoInfoElement;
    };
    interface HTMLDsoInfoButtonElementEventMap {
        "dsoToggle": InfoButtonToggleEvent;
    }
    interface HTMLDsoInfoButtonElement extends Components.DsoInfoButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoInfoButtonElementEventMap>(type: K, listener: (this: HTMLDsoInfoButtonElement, ev: DsoInfoButtonCustomEvent<HTMLDsoInfoButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoInfoButtonElementEventMap>(type: K, listener: (this: HTMLDsoInfoButtonElement, ev: DsoInfoButtonCustomEvent<HTMLDsoInfoButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoInfoButtonElement: {
        prototype: HTMLDsoInfoButtonElement;
        new (): HTMLDsoInfoButtonElement;
    };
    interface HTMLDsoInputRangeElementEventMap {
        "dsoChange": InputRangeChangeEvent;
    }
    interface HTMLDsoInputRangeElement extends Components.DsoInputRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoInputRangeElementEventMap>(type: K, listener: (this: HTMLDsoInputRangeElement, ev: DsoInputRangeCustomEvent<HTMLDsoInputRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoInputRangeElementEventMap>(type: K, listener: (this: HTMLDsoInputRangeElement, ev: DsoInputRangeCustomEvent<HTMLDsoInputRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoInputRangeElement: {
        prototype: HTMLDsoInputRangeElement;
        new (): HTMLDsoInputRangeElement;
    };
    interface HTMLDsoLabelElementEventMap {
        "dsoRemoveClick": MouseEvent;
    }
    interface HTMLDsoLabelElement extends Components.DsoLabel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoLabelElementEventMap>(type: K, listener: (this: HTMLDsoLabelElement, ev: DsoLabelCustomEvent<HTMLDsoLabelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoLabelElementEventMap>(type: K, listener: (this: HTMLDsoLabelElement, ev: DsoLabelCustomEvent<HTMLDsoLabelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoLabelElement: {
        prototype: HTMLDsoLabelElement;
        new (): HTMLDsoLabelElement;
    };
    interface HTMLDsoLegendItemElementEventMap {
        "dsoRemoveClick": LegendItemRemoveClickEvent;
        "dsoMouseEnter": any;
        "dsoMouseLeave": any;
    }
    interface HTMLDsoLegendItemElement extends Components.DsoLegendItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoLegendItemElementEventMap>(type: K, listener: (this: HTMLDsoLegendItemElement, ev: DsoLegendItemCustomEvent<HTMLDsoLegendItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoLegendItemElementEventMap>(type: K, listener: (this: HTMLDsoLegendItemElement, ev: DsoLegendItemCustomEvent<HTMLDsoLegendItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoLegendItemElement: {
        prototype: HTMLDsoLegendItemElement;
        new (): HTMLDsoLegendItemElement;
    };
    interface HTMLDsoListButtonElementEventMap {
        "dsoCountChange": ListButtonChangeEvent;
        "dsoSelectedChange": ListButtonSelectedEvent;
    }
    interface HTMLDsoListButtonElement extends Components.DsoListButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoListButtonElementEventMap>(type: K, listener: (this: HTMLDsoListButtonElement, ev: DsoListButtonCustomEvent<HTMLDsoListButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoListButtonElementEventMap>(type: K, listener: (this: HTMLDsoListButtonElement, ev: DsoListButtonCustomEvent<HTMLDsoListButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoListButtonElement: {
        prototype: HTMLDsoListButtonElement;
        new (): HTMLDsoListButtonElement;
    };
    interface HTMLDsoLogoElementEventMap {
        "dsoLogoClick": LogoClickEvent;
        "dsoLabelClick": LogoLabelClickEvent;
    }
    interface HTMLDsoLogoElement extends Components.DsoLogo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoLogoElementEventMap>(type: K, listener: (this: HTMLDsoLogoElement, ev: DsoLogoCustomEvent<HTMLDsoLogoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoLogoElementEventMap>(type: K, listener: (this: HTMLDsoLogoElement, ev: DsoLogoCustomEvent<HTMLDsoLogoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoLogoElement: {
        prototype: HTMLDsoLogoElement;
        new (): HTMLDsoLogoElement;
    };
    interface HTMLDsoMapBaseLayersElementEventMap {
        "dsoBaseLayerChange": BaseLayerChangeEvent;
    }
    interface HTMLDsoMapBaseLayersElement extends Components.DsoMapBaseLayers, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoMapBaseLayersElementEventMap>(type: K, listener: (this: HTMLDsoMapBaseLayersElement, ev: DsoMapBaseLayersCustomEvent<HTMLDsoMapBaseLayersElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoMapBaseLayersElementEventMap>(type: K, listener: (this: HTMLDsoMapBaseLayersElement, ev: DsoMapBaseLayersCustomEvent<HTMLDsoMapBaseLayersElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoMapBaseLayersElement: {
        prototype: HTMLDsoMapBaseLayersElement;
        new (): HTMLDsoMapBaseLayersElement;
    };
    interface HTMLDsoMapControlsElementEventMap {
        "dsoZoomIn": MouseEvent;
        "dsoZoomOut": MouseEvent;
        "dsoToggle": MapControlsToggleEvent;
    }
    interface HTMLDsoMapControlsElement extends Components.DsoMapControls, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoMapControlsElementEventMap>(type: K, listener: (this: HTMLDsoMapControlsElement, ev: DsoMapControlsCustomEvent<HTMLDsoMapControlsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoMapControlsElementEventMap>(type: K, listener: (this: HTMLDsoMapControlsElement, ev: DsoMapControlsCustomEvent<HTMLDsoMapControlsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoMapControlsElement: {
        prototype: HTMLDsoMapControlsElement;
        new (): HTMLDsoMapControlsElement;
    };
    interface HTMLDsoMapOverlaysElementEventMap {
        "dsoToggleOverlay": OverlayChangeEvent;
    }
    interface HTMLDsoMapOverlaysElement extends Components.DsoMapOverlays, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoMapOverlaysElementEventMap>(type: K, listener: (this: HTMLDsoMapOverlaysElement, ev: DsoMapOverlaysCustomEvent<HTMLDsoMapOverlaysElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoMapOverlaysElementEventMap>(type: K, listener: (this: HTMLDsoMapOverlaysElement, ev: DsoMapOverlaysCustomEvent<HTMLDsoMapOverlaysElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoMapOverlaysElement: {
        prototype: HTMLDsoMapOverlaysElement;
        new (): HTMLDsoMapOverlaysElement;
    };
    interface HTMLDsoMarkBarElementEventMap {
        "dsoInput": MarkBarInputEvent;
        "dsoNext": MarkBarPaginationEvent;
        "dsoPrevious": MarkBarPaginationEvent;
        "dsoClear": MarkBarClearEvent;
    }
    interface HTMLDsoMarkBarElement extends Components.DsoMarkBar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoMarkBarElementEventMap>(type: K, listener: (this: HTMLDsoMarkBarElement, ev: DsoMarkBarCustomEvent<HTMLDsoMarkBarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoMarkBarElementEventMap>(type: K, listener: (this: HTMLDsoMarkBarElement, ev: DsoMarkBarCustomEvent<HTMLDsoMarkBarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoMarkBarElement: {
        prototype: HTMLDsoMarkBarElement;
        new (): HTMLDsoMarkBarElement;
    };
    interface HTMLDsoModalElementEventMap {
        "dsoClose": ModalCloseEvent;
    }
    interface HTMLDsoModalElement extends Components.DsoModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoModalElementEventMap>(type: K, listener: (this: HTMLDsoModalElement, ev: DsoModalCustomEvent<HTMLDsoModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoModalElementEventMap>(type: K, listener: (this: HTMLDsoModalElement, ev: DsoModalCustomEvent<HTMLDsoModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoModalElement: {
        prototype: HTMLDsoModalElement;
        new (): HTMLDsoModalElement;
    };
    interface HTMLDsoOzonContentElementEventMap {
        "dsoAnchorClick": OzonContentAnchorClickEvent;
        "dsoOzonContentMarkItemHighlight": OzonContentMarkItemHighlightEvent;
    }
    interface HTMLDsoOzonContentElement extends Components.DsoOzonContent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoOzonContentElementEventMap>(type: K, listener: (this: HTMLDsoOzonContentElement, ev: DsoOzonContentCustomEvent<HTMLDsoOzonContentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoOzonContentElementEventMap>(type: K, listener: (this: HTMLDsoOzonContentElement, ev: DsoOzonContentCustomEvent<HTMLDsoOzonContentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoOzonContentElement: {
        prototype: HTMLDsoOzonContentElement;
        new (): HTMLDsoOzonContentElement;
    };
    interface HTMLDsoPaginationElementEventMap {
        "dsoSelectPage": PaginationSelectPageEvent;
    }
    interface HTMLDsoPaginationElement extends Components.DsoPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoPaginationElementEventMap>(type: K, listener: (this: HTMLDsoPaginationElement, ev: DsoPaginationCustomEvent<HTMLDsoPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoPaginationElementEventMap>(type: K, listener: (this: HTMLDsoPaginationElement, ev: DsoPaginationCustomEvent<HTMLDsoPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoPaginationElement: {
        prototype: HTMLDsoPaginationElement;
        new (): HTMLDsoPaginationElement;
    };
    interface HTMLDsoPanelElementEventMap {
        "dsoCloseClick": PanelCloseEvent;
    }
    interface HTMLDsoPanelElement extends Components.DsoPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoPanelElementEventMap>(type: K, listener: (this: HTMLDsoPanelElement, ev: DsoPanelCustomEvent<HTMLDsoPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoPanelElementEventMap>(type: K, listener: (this: HTMLDsoPanelElement, ev: DsoPanelCustomEvent<HTMLDsoPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoPanelElement: {
        prototype: HTMLDsoPanelElement;
        new (): HTMLDsoPanelElement;
    };
    interface HTMLDsoPlekinfoCardElementEventMap {
        "dsoPlekinfoCardClick": PlekinfoCardClickEvent;
    }
    interface HTMLDsoPlekinfoCardElement extends Components.DsoPlekinfoCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoPlekinfoCardElementEventMap>(type: K, listener: (this: HTMLDsoPlekinfoCardElement, ev: DsoPlekinfoCardCustomEvent<HTMLDsoPlekinfoCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoPlekinfoCardElementEventMap>(type: K, listener: (this: HTMLDsoPlekinfoCardElement, ev: DsoPlekinfoCardCustomEvent<HTMLDsoPlekinfoCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoPlekinfoCardElement: {
        prototype: HTMLDsoPlekinfoCardElement;
        new (): HTMLDsoPlekinfoCardElement;
    };
    interface HTMLDsoProgressBarElement extends Components.DsoProgressBar, HTMLStencilElement {
    }
    var HTMLDsoProgressBarElement: {
        prototype: HTMLDsoProgressBarElement;
        new (): HTMLDsoProgressBarElement;
    };
    interface HTMLDsoProgressIndicatorElement extends Components.DsoProgressIndicator, HTMLStencilElement {
    }
    var HTMLDsoProgressIndicatorElement: {
        prototype: HTMLDsoProgressIndicatorElement;
        new (): HTMLDsoProgressIndicatorElement;
    };
    interface HTMLDsoProjectItemElement extends Components.DsoProjectItem, HTMLStencilElement {
    }
    var HTMLDsoProjectItemElement: {
        prototype: HTMLDsoProjectItemElement;
        new (): HTMLDsoProjectItemElement;
    };
    /**
     * Met dit component kan een `RenvooiValue` worden gepresenteerd.
     */
    interface HTMLDsoRenvooiElement extends Components.DsoRenvooi, HTMLStencilElement {
    }
    var HTMLDsoRenvooiElement: {
        prototype: HTMLDsoRenvooiElement;
        new (): HTMLDsoRenvooiElement;
    };
    interface HTMLDsoResponsiveElementElementEventMap {
        "dsoSizeChange": ResponsiveElementSize;
    }
    interface HTMLDsoResponsiveElementElement extends Components.DsoResponsiveElement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoResponsiveElementElementEventMap>(type: K, listener: (this: HTMLDsoResponsiveElementElement, ev: DsoResponsiveElementCustomEvent<HTMLDsoResponsiveElementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoResponsiveElementElementEventMap>(type: K, listener: (this: HTMLDsoResponsiveElementElement, ev: DsoResponsiveElementCustomEvent<HTMLDsoResponsiveElementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoResponsiveElementElement: {
        prototype: HTMLDsoResponsiveElementElement;
        new (): HTMLDsoResponsiveElementElement;
    };
    interface HTMLDsoScrollableElementEventMap {
        "dsoScrollEnd": DsoScrollEndEvent;
    }
    interface HTMLDsoScrollableElement extends Components.DsoScrollable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoScrollableElementEventMap>(type: K, listener: (this: HTMLDsoScrollableElement, ev: DsoScrollableCustomEvent<HTMLDsoScrollableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoScrollableElementEventMap>(type: K, listener: (this: HTMLDsoScrollableElement, ev: DsoScrollableCustomEvent<HTMLDsoScrollableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoScrollableElement: {
        prototype: HTMLDsoScrollableElement;
        new (): HTMLDsoScrollableElement;
    };
    interface HTMLDsoSelectableElementEventMap {
        "dsoChange": SelectableChangeEvent;
    }
    interface HTMLDsoSelectableElement extends Components.DsoSelectable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoSelectableElementEventMap>(type: K, listener: (this: HTMLDsoSelectableElement, ev: DsoSelectableCustomEvent<HTMLDsoSelectableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoSelectableElementEventMap>(type: K, listener: (this: HTMLDsoSelectableElement, ev: DsoSelectableCustomEvent<HTMLDsoSelectableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoSelectableElement: {
        prototype: HTMLDsoSelectableElement;
        new (): HTMLDsoSelectableElement;
    };
    interface HTMLDsoSkiplinkElementEventMap {
        "dsoSkiplinkClick": SkiplinkClickEvent;
    }
    interface HTMLDsoSkiplinkElement extends Components.DsoSkiplink, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoSkiplinkElementEventMap>(type: K, listener: (this: HTMLDsoSkiplinkElement, ev: DsoSkiplinkCustomEvent<HTMLDsoSkiplinkElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoSkiplinkElementEventMap>(type: K, listener: (this: HTMLDsoSkiplinkElement, ev: DsoSkiplinkCustomEvent<HTMLDsoSkiplinkElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoSkiplinkElement: {
        prototype: HTMLDsoSkiplinkElement;
        new (): HTMLDsoSkiplinkElement;
    };
    interface HTMLDsoSlideToggleElementEventMap {
        "dsoActiveChange": SlideToggleActiveEvent;
    }
    interface HTMLDsoSlideToggleElement extends Components.DsoSlideToggle, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoSlideToggleElementEventMap>(type: K, listener: (this: HTMLDsoSlideToggleElement, ev: DsoSlideToggleCustomEvent<HTMLDsoSlideToggleElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoSlideToggleElementEventMap>(type: K, listener: (this: HTMLDsoSlideToggleElement, ev: DsoSlideToggleCustomEvent<HTMLDsoSlideToggleElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoSlideToggleElement: {
        prototype: HTMLDsoSlideToggleElement;
        new (): HTMLDsoSlideToggleElement;
    };
    interface HTMLDsoTabElementEventMap {
        "dsoTabSwitch": TabsSwitchEvent;
    }
    interface HTMLDsoTabElement extends Components.DsoTab, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoTabElementEventMap>(type: K, listener: (this: HTMLDsoTabElement, ev: DsoTabCustomEvent<HTMLDsoTabElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoTabElementEventMap>(type: K, listener: (this: HTMLDsoTabElement, ev: DsoTabCustomEvent<HTMLDsoTabElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoTabElement: {
        prototype: HTMLDsoTabElement;
        new (): HTMLDsoTabElement;
    };
    interface HTMLDsoTableElement extends Components.DsoTable, HTMLStencilElement {
    }
    var HTMLDsoTableElement: {
        prototype: HTMLDsoTableElement;
        new (): HTMLDsoTableElement;
    };
    interface HTMLDsoTabsElement extends Components.DsoTabs, HTMLStencilElement {
    }
    var HTMLDsoTabsElement: {
        prototype: HTMLDsoTabsElement;
        new (): HTMLDsoTabsElement;
    };
    interface HTMLDsoToggletipElement extends Components.DsoToggletip, HTMLStencilElement {
    }
    var HTMLDsoToggletipElement: {
        prototype: HTMLDsoToggletipElement;
        new (): HTMLDsoToggletipElement;
    };
    interface HTMLDsoTooltipElement extends Components.DsoTooltip, HTMLStencilElement {
    }
    var HTMLDsoTooltipElement: {
        prototype: HTMLDsoTooltipElement;
        new (): HTMLDsoTooltipElement;
    };
    interface HTMLDsoTreeViewElementEventMap {
        "dsoOpenItem": TreeViewItem[];
        "dsoCloseItem": TreeViewItem[];
        "dsoClickItem": TreeViewPointerEvent;
    }
    interface HTMLDsoTreeViewElement extends Components.DsoTreeView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoTreeViewElementEventMap>(type: K, listener: (this: HTMLDsoTreeViewElement, ev: DsoTreeViewCustomEvent<HTMLDsoTreeViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoTreeViewElementEventMap>(type: K, listener: (this: HTMLDsoTreeViewElement, ev: DsoTreeViewCustomEvent<HTMLDsoTreeViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoTreeViewElement: {
        prototype: HTMLDsoTreeViewElement;
        new (): HTMLDsoTreeViewElement;
    };
    interface HTMLDsoViewerGridElementEventMap {
        "dsoCloseOverlay": ViewerGridCloseOverlayEvent;
        "dsoFilterpanelCancel": ViewerGridFilterpanelCancelEvent;
        "dsoFilterpanelApply": ViewerGridFilterpanelApplyEvent;
        "dsoActiveTabSwitch": ViewerGridActiveTabSwitchEvent;
        "dsoMainSizeChange": ViewerGridChangeSizeEvent;
        "dsoMainSizeChangeAnimationEnd": ViewerGridChangeSizeAnimationEndEvent;
        "dsoDocumentPanelSizeChange": ViewerGridChangeSizeEvent;
        "dsoDocumentPanelSizeChangeAnimationEnd": ViewerGridChangeSizeAnimationEndEvent;
        "dsoMainPanelExpand": ViewerGridMainExpandEvent;
        "dsoMainPanelToggle": ViewerGridMainToggleEvent;
    }
    interface HTMLDsoViewerGridElement extends Components.DsoViewerGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsoViewerGridElementEventMap>(type: K, listener: (this: HTMLDsoViewerGridElement, ev: DsoViewerGridCustomEvent<HTMLDsoViewerGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsoViewerGridElementEventMap>(type: K, listener: (this: HTMLDsoViewerGridElement, ev: DsoViewerGridCustomEvent<HTMLDsoViewerGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsoViewerGridElement: {
        prototype: HTMLDsoViewerGridElement;
        new (): HTMLDsoViewerGridElement;
    };
    interface HTMLDsotDocumentComponentDemoElementEventMap {
        "dsotOzonContentAnchorClick": DocumentComponentOzonContentAnchorClickEvent;
        "dsotTableOfContentsClick": DocumentComponentTableOfContentsClickEvent;
    }
    interface HTMLDsotDocumentComponentDemoElement extends Components.DsotDocumentComponentDemo, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDsotDocumentComponentDemoElementEventMap>(type: K, listener: (this: HTMLDsotDocumentComponentDemoElement, ev: DsotDocumentComponentDemoCustomEvent<HTMLDsotDocumentComponentDemoElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDsotDocumentComponentDemoElementEventMap>(type: K, listener: (this: HTMLDsotDocumentComponentDemoElement, ev: DsotDocumentComponentDemoCustomEvent<HTMLDsotDocumentComponentDemoElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDsotDocumentComponentDemoElement: {
        prototype: HTMLDsotDocumentComponentDemoElement;
        new (): HTMLDsotDocumentComponentDemoElement;
    };
    interface HTMLElementTagNameMap {
        "dso-accordion": HTMLDsoAccordionElement;
        "dso-accordion-section": HTMLDsoAccordionSectionElement;
        "dso-action-list": HTMLDsoActionListElement;
        "dso-action-list-item": HTMLDsoActionListItemElement;
        "dso-advanced-select": HTMLDsoAdvancedSelectElement;
        "dso-alert": HTMLDsoAlertElement;
        "dso-annotation-activiteit": HTMLDsoAnnotationActiviteitElement;
        "dso-annotation-gebiedsaanwijzing": HTMLDsoAnnotationGebiedsaanwijzingElement;
        "dso-annotation-kaart": HTMLDsoAnnotationKaartElement;
        "dso-annotation-locatie": HTMLDsoAnnotationLocatieElement;
        "dso-annotation-omgevingsnormwaarde": HTMLDsoAnnotationOmgevingsnormwaardeElement;
        "dso-attachments-counter": HTMLDsoAttachmentsCounterElement;
        "dso-autosuggest": HTMLDsoAutosuggestElement;
        "dso-badge": HTMLDsoBadgeElement;
        "dso-banner": HTMLDsoBannerElement;
        "dso-card": HTMLDsoCardElement;
        "dso-card-container": HTMLDsoCardContainerElement;
        "dso-date-picker": HTMLDsoDatePickerElement;
        "dso-date-picker-legacy": HTMLDsoDatePickerLegacyElement;
        "dso-document-card": HTMLDsoDocumentCardElement;
        "dso-document-component": HTMLDsoDocumentComponentElement;
        "dso-dropdown-menu": HTMLDsoDropdownMenuElement;
        "dso-expandable": HTMLDsoExpandableElement;
        "dso-header": HTMLDsoHeaderElement;
        "dso-helpcenter-panel": HTMLDsoHelpcenterPanelElement;
        "dso-highlight-box": HTMLDsoHighlightBoxElement;
        "dso-icon": HTMLDsoIconElement;
        "dso-image-overlay": HTMLDsoImageOverlayElement;
        "dso-info": HTMLDsoInfoElement;
        "dso-info-button": HTMLDsoInfoButtonElement;
        "dso-input-range": HTMLDsoInputRangeElement;
        "dso-label": HTMLDsoLabelElement;
        "dso-legend-item": HTMLDsoLegendItemElement;
        "dso-list-button": HTMLDsoListButtonElement;
        "dso-logo": HTMLDsoLogoElement;
        "dso-map-base-layers": HTMLDsoMapBaseLayersElement;
        "dso-map-controls": HTMLDsoMapControlsElement;
        "dso-map-overlays": HTMLDsoMapOverlaysElement;
        "dso-mark-bar": HTMLDsoMarkBarElement;
        "dso-modal": HTMLDsoModalElement;
        "dso-ozon-content": HTMLDsoOzonContentElement;
        "dso-pagination": HTMLDsoPaginationElement;
        "dso-panel": HTMLDsoPanelElement;
        "dso-plekinfo-card": HTMLDsoPlekinfoCardElement;
        "dso-progress-bar": HTMLDsoProgressBarElement;
        "dso-progress-indicator": HTMLDsoProgressIndicatorElement;
        "dso-project-item": HTMLDsoProjectItemElement;
        "dso-renvooi": HTMLDsoRenvooiElement;
        "dso-responsive-element": HTMLDsoResponsiveElementElement;
        "dso-scrollable": HTMLDsoScrollableElement;
        "dso-selectable": HTMLDsoSelectableElement;
        "dso-skiplink": HTMLDsoSkiplinkElement;
        "dso-slide-toggle": HTMLDsoSlideToggleElement;
        "dso-tab": HTMLDsoTabElement;
        "dso-table": HTMLDsoTableElement;
        "dso-tabs": HTMLDsoTabsElement;
        "dso-toggletip": HTMLDsoToggletipElement;
        "dso-tooltip": HTMLDsoTooltipElement;
        "dso-tree-view": HTMLDsoTreeViewElement;
        "dso-viewer-grid": HTMLDsoViewerGridElement;
        "dsot-document-component-demo": HTMLDsotDocumentComponentDemoElement;
    }
}
declare namespace LocalJSX {
    interface DsoAccordion {
        /**
          * Places the chevron at the opposite side.  Note: this mode does not display `state`, `attachmentCount` or `status` props on Accordion Sections
         */
        "reverseAlign"?: boolean;
        /**
          * The variant of the Accordion.
         */
        "variant"?: AccordionVariant;
    }
    interface DsoAccordionSection {
        /**
          * `attachmentCount` takes precedence over `icon`
         */
        "attachmentCount"?: number;
        /**
          * The title of the handle
         */
        "handleTitle": RenvooiValue | undefined;
        /**
          * When set the handle will render as a `<a>`. When undefined it renders as a `<button>`
         */
        "handleUrl"?: string;
        /**
          * Set when this Accordion Section contains or will contain an Accordion.
         */
        "hasNestedAccordion"?: boolean;
        /**
          * Which heading element to use.
         */
        "heading"?: AccordionHeading;
        /**
          * To set an icon in the heading handle.
         */
        "icon"?: string;
        /**
          * The label to be displayed in the heading handle inside a Label (optional)
         */
        "label"?: string;
        /**
          * The status of the Label in the heading handle (optional)
         */
        "labelStatus"?: LabelStatus;
        /**
          * Event emitted when the Accordion Section completes its toggle animation.
         */
        "onDsoAnimationEnd"?: (event: DsoAccordionSectionCustomEvent<AccordionSectionAnimationEndEvent>) => void;
        /**
          * Event emitted when the Accordion Section starts its toggle animation.
         */
        "onDsoAnimationStart"?: (event: DsoAccordionSectionCustomEvent<AccordionSectionAnimationStartEvent>) => void;
        /**
          * Emitted when the user activates the toggle button.
         */
        "onDsoToggleClick"?: (event: DsoAccordionSectionCustomEvent<AccordionSectionToggleClickEvent>) => void;
        /**
          * Set the Accordion Section open.
         */
        "open"?: boolean;
        /**
          * `state` takes precedence over `attachmentCount` and `icon`
         */
        "status"?: AccordionSectionState;
        /**
          * The status of the section.
         */
        "statusDescription"?: string;
        /**
          * An optional 'wijzigactie' that signals if the contents of the section is added or removed.
         */
        "wijzigactie"?: AccordionSectionWijzigactie;
    }
    interface DsoActionList {
        /**
          * The title.
         */
        "listTitle": string;
    }
    interface DsoActionListItem {
        /**
          * Places a dashed line at the bottom of the item.
         */
        "divider"?: boolean;
        /**
          * Show flow line to next step
         */
        "flowLine"?: boolean;
        /**
          * The title of the item.
         */
        "itemTitle"?: string;
        /**
          * The step of the Action List Item.
         */
        "step": number;
        /**
          * When there is a warning.
         */
        "warning"?: boolean;
    }
    interface DsoAdvancedSelect {
        /**
          * The active option. By object reference.
         */
        "active"?: AdvancedSelectOption<never>;
        /**
          * An extra text for the active option. Only visible in the list of options.
         */
        "activeHint"?: string;
        /**
          * Emitted when user selects an option
         */
        "onDsoChange"?: (event: DsoAdvancedSelectCustomEvent<AdvancedSelectChangeEvent<never>>) => void;
        /**
          * Emitted when user activates a group redirect link.
         */
        "onDsoRedirect"?: (event: DsoAdvancedSelectCustomEvent<AdvancedSelectRedirectEvent>) => void;
        /**
          * The options to display in the select.
         */
        "options"?: AdvancedSelectOptionOrGroup<never>[];
    }
    interface DsoAlert {
        /**
          * Show alert as compact variant (without icon)
         */
        "compact"?: boolean;
        /**
          * Whether or not to show the role attribute with value "alert". To control the tooltip add the `role-alert` attribute.
         */
        "roleAlert"?: boolean;
        /**
          * Set status of alert
         */
        "status": "success" | "info" | "warning" | "error";
    }
    interface DsoAnnotationActiviteit {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De noemer van de locatie.
         */
        "locatieNoemers"?: Array<RenvooiValue | string>;
        /**
          * De naam van de activiteit.
         */
        "naam"?: RenvooiValue | string;
        /**
          * Een optionele event listener voor wijzigingen aan de status van de annotatie.
         */
        "onDsoActiveChange"?: (event: DsoAnnotationActiviteitCustomEvent<AnnotationActiveChangeEvent>) => void;
        /**
          * De activiteit regel kwalificatie.
         */
        "regelKwalificatie"?: RenvooiValue | string;
        /**
          * Voorzetsel van de regelKwalificatie. Exclusief dubbele punt.
         */
        "regelKwalificatieVoorzetsel"?: string;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAnnotationGebiedsaanwijzing {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De naam van de gebiedsaanwijzing.
         */
        "naam"?: RenvooiValue | string;
        /**
          * Een optionele event listener voor wijzigingen aan de status van de annotatie.
         */
        "onDsoActiveChange"?: (event: DsoAnnotationGebiedsaanwijzingCustomEvent<AnnotationActiveChangeEvent>) => void;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAnnotationKaart {
        /**
          * De url naar de kaart.  Gebruik het event `dsoClick` om de navigatie aan de router te koppelen.
         */
        "href"?: string;
        /**
          * De naam van de kaart.
         */
        "naam"?: RenvooiValue | string;
        /**
          * Event als de gebruiker de kaartnaam selecteert.  Let op "isModifiedEvent" om te bepalen of de navigatieactie door de router of de browser moet worden afgehandeld.
         */
        "onDsoClick"?: (event: DsoAnnotationKaartCustomEvent<AnnotationKaartClickEvent>) => void;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie is toegevoegd of verwijderd.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAnnotationLocatie {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De noemer van de locatie.
         */
        "locatieNoemer"?: RenvooiValue | string;
        /**
          * Een optionele event listener voor wijzigingen aan de status van de annotatie.
         */
        "onDsoActiveChange"?: (event: DsoAnnotationLocatieCustomEvent<AnnotationActiveChangeEvent>) => void;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    /**
     * Dit component wordt voor een Omgevingsnorm en Omgevingswaarde gebruikt.
     */
    interface DsoAnnotationOmgevingsnormwaarde {
        /**
          * Een optionele boolean die aangeeft of de annotatie actief is.
         */
        "active"?: boolean;
        /**
          * De eenheid van de omgevingsnorm of omgevingswaarde.
         */
        "eenheid"?: RenvooiValue | string;
        /**
          * Een optionele boolean die aangeeft of de locatie van de annotatie gewijzigd is.
         */
        "gewijzigdeLocatie"?: boolean;
        /**
          * De naam van de omgevingsnorm of omgevingswaarde.
         */
        "naam"?: RenvooiValue | string;
        /**
          * Een optionele event listener voor wijzigingen aan de status van de annotatie.
         */
        "onDsoActiveChange"?: (event: DsoAnnotationOmgevingsnormwaardeCustomEvent<AnnotationActiveChangeEvent>) => void;
        /**
          * De toelichting van de waardes.
         */
        "toelichting"?: string;
        /**
          * De waardes van de omgevingsnorm of omgevingswaarde.
         */
        "waardes"?: Array<RenvooiValue | string>;
        /**
          * Een optionele wijzigactie die aangeeft of de annotatie toegevoegd of verwijderd is.
         */
        "wijzigactie"?: AnnotationWijzigactie;
    }
    interface DsoAttachmentsCounter {
        /**
          * The number of attachments.
         */
        "count": number;
    }
    interface DsoAutosuggest {
        /**
          * Shows progress indicator when fetching results.
         */
        "loading"?: boolean;
        /**
          * To delay progress indicator showing (in ms).
         */
        "loadingDelayed"?: number;
        /**
          * To override progress indicator's default loading label.
         */
        "loadingLabel"?: string;
        /**
          * A function provided by the consumer of the autosuggest component, that returns an array of `AutosuggestMarkItem`s
         */
        "mark"?: AutosuggestMarkFunction;
        /**
          * To show text when no results are found.
         */
        "notFoundLabel"?: string;
        /**
          * This is emitted debounced for every change for the slotted input type=text element.
         */
        "onDsoChange"?: (event: DsoAutosuggestCustomEvent<string>) => void;
        /**
          * Emitted when enter is pressed. The `detail` property of the `CustomEvent` will contain the input text.
         */
        "onDsoSearch"?: (event: DsoAutosuggestCustomEvent<string>) => void;
        /**
          * Emitted when a suggestion is selected. The `detail` property of the `CustomEvent` will contain the selected suggestion.
         */
        "onDsoSelect"?: (event: DsoAutosuggestCustomEvent<Suggestion>) => void;
        /**
          * Whether the previous suggestions will be presented when the input gets focus again.
         */
        "suggestOnFocus"?: boolean;
        /**
          * The suggestions for the value of the slotted input element. Optionally a Suggestion can have a `type` and `item`.  The `type` is used to style the suggestion. `item` can be use to reference the original object that was used to create the suggestion.  The value should be null when no suggestions have been fetched.
         */
        "suggestions"?: Suggestion[] | null;
    }
    interface DsoBadge {
        /**
          * The status of the Badge.
         */
        "status"?: BadgeStatus;
    }
    interface DsoBanner {
        /**
          * compact mode.
         */
        "compact"?: boolean;
        /**
          * *Only available when `compact` is set to `true`.  Option to show banner icon.
         */
        "noIcon"?: boolean;
        /**
          * The status of the banner.
         */
        "status": "danger" | "error" | "info" | "warning";
    }
    interface DsoCard {
        /**
          * Makes the Card active.
         */
        "active"?: boolean;
        /**
          * The URL to which the Card heading links.
         */
        "href": string | undefined;
        /**
          * Display the link as an external link or a download link  - "download"  - "extern"
         */
        "mode"?: string;
        /**
          * Emitted when the Card heading is clicked.
         */
        "onDsoCardClick"?: (event: DsoCardCustomEvent<CardClickEvent>) => void;
    }
    interface DsoCardContainer {
        /**
          * The mode of the Card Container.
         */
        "mode"?: CardContainerMode;
    }
    interface DsoDatePicker {
        /**
          * ID of element that describes the input element
         */
        "describedBy"?: string;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Should the input be focused on load?
         */
        "dsoAutofocus"?: boolean;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier"?: string | undefined;
        /**
          * Is input invalid?
         */
        "invalid"?: boolean;
        /**
          * Maximum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the min property.
         */
        "max"?: string | undefined;
        /**
          * Minimum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the max property.
         */
        "min"?: string | undefined;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onDsoBlur"?: (event: DsoDatePickerCustomEvent<DatePickerBlurEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onDsoDateChange"?: (event: DsoDatePickerCustomEvent<DatePickerChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onDsoFocus"?: (event: DsoDatePickerCustomEvent<DatePickerFocusEvent>) => void;
        /**
          * Event emitted on key down in the date picker input.
         */
        "onDsoKeyDown"?: (event: DsoDatePickerCustomEvent<DatePickerKeyboardEvent>) => void;
        /**
          * Event emitted on key up in the date picker input.
         */
        "onDsoKeyUp"?: (event: DsoDatePickerCustomEvent<DatePickerKeyboardEvent>) => void;
        /**
          * Should the input be marked as required?
         */
        "required"?: boolean;
        /**
          * Date value. Must be in Dutch date format: DD-MM-YYYY.
         */
        "value"?: string;
    }
    interface DsoDatePickerLegacy {
        /**
          * ID of element that describes the input element
         */
        "describedBy"?: string;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction"?: DsoDatePickerLegacyDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Should the input be focused on load?
         */
        "dsoAutofocus"?: boolean;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier"?: string | undefined;
        /**
          * Is input invalid?
         */
        "invalid"?: boolean;
        /**
          * Maximum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the min property.
         */
        "max"?: string | undefined;
        /**
          * Minimum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the max property.
         */
        "min"?: string | undefined;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onDsoBlur"?: (event: DsoDatePickerLegacyCustomEvent<DsoDatePickerLegacyFocusEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onDsoDateChange"?: (event: DsoDatePickerLegacyCustomEvent<DsoDatePickerLegacyChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onDsoFocus"?: (event: DsoDatePickerLegacyCustomEvent<DsoDatePickerLegacyFocusEvent>) => void;
        /**
          * Event emitted on key down in the date picker input.
         */
        "onDsoKeyDown"?: (event: DsoDatePickerLegacyCustomEvent<DsoDatePickerLegacyKeyboardEvent>) => void;
        /**
          * Event emitted on key up in the date picker input.
         */
        "onDsoKeyUp"?: (event: DsoDatePickerLegacyCustomEvent<DsoDatePickerLegacyKeyboardEvent>) => void;
        /**
          * Should the input be marked as required?
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role"?: string | null;
        /**
          * Date value. Must be in Dutch date format: DD-MM-YYYY.
         */
        "value"?: string;
    }
    interface DsoDocumentCard {
        /**
          * Makes the DocumentCard active.
         */
        "active"?: boolean;
        /**
          * The URL to which the DocumentCard heading links.
         */
        "href": string | undefined;
        /**
          * Emitted when the DocumentCard heading is clicked.
         */
        "onDsoDocumentCardClick"?: (event: DsoDocumentCardCustomEvent<DocumentCardClickEvent>) => void;
    }
    interface DsoDocumentComponent {
        /**
          * An alternative title to show when there is nothing to create a title.
         */
        "alternativeTitle"?: string;
        /**
          * Enables annotations.
         */
        "annotated"?: boolean;
        /**
          * The wijzigactie for all annotations.
         */
        "annotationsWijzigactie"?: DocumentComponentAnnotationsWijzigactie;
        /**
          * Marks as draft.
         */
        "bevatOntwerpInformatie"?: boolean;
        /**
          * Marks this Document Component as belonging to an active filter.
         */
        "filtered"?: boolean;
        /**
          * When a child Document Component has a status "Draft".
         */
        "genesteOntwerpInformatie"?: boolean;
        /**
          * Marks Document Component as reserved.
         */
        "gereserveerd"?: boolean;
        /**
          * The heading element to use.
         */
        "heading"?: "h2" | "h3" | "h4" | "h5" | "h6";
        /**
          * The URL to which the Heading links (only in mode="table-of-contents").
         */
        "href"?: string;
        /**
          * The Inhoud XML.
         */
        "inhoud"?: DocumentComponentInputType;
        /**
          * The Label XML.
         */
        "label"?: DocumentComponentInputType;
        /**
          * To mark text.
         */
        "mark"?: DocumentComponentMarkFunction;
        /**
          * The mode of the Document Component. One of "document" or "table-of-contents". Defaults to "document"
         */
        "mode"?: DocumentComponentMode;
        /**
          * Marks this Document Component as not-applicable.
         */
        "notApplicable"?: boolean;
        /**
          * The Nummer XML.
         */
        "nummer"?: DocumentComponentInputType;
        /**
          * Emitted when the user activates the annotation button.
         */
        "onDsoAnnotationToggle"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentToggleAnnotationEvent>) => void;
        /**
          * Emitted each time a marked item gets highlighted.
         */
        "onDsoMarkItemHighlight"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentMarkItemHighlightEvent>) => void;
        /**
          * Emitted when the user activates the toggle.
         */
        "onDsoOpenToggle"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentOpenToggleEvent>) => void;
        /**
          * Emitted when the user actives intRef or intIoRef anchors in Ozon Content
         */
        "onDsoOzonContentAnchorClick"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentOzonContentAnchorClickEvent>) => void;
        /**
          * Emitted when the user activates the recursive toggle.
         */
        "onDsoRecursiveToggle"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentRecursiveToggleEvent>) => void;
        /**
          * Emitted when the user clicks the heading in mode="table-of-contents".
         */
        "onDsoTableOfContentsClick"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentTableOfContentsClickEvent>) => void;
        /**
          * This boolean attribute indicates whether the children are visible.
         */
        "open"?: boolean;
        /**
          * When the Annotation is opened, set this to true.
         */
        "openAnnotation"?: boolean;
        /**
          * The Opschrift XML.
         */
        "opschrift"?: DocumentComponentInputType;
        /**
          * Shows the recursive toggle button. When the user activates this button the event `dsoRecursiveToggle` is emitted.
         */
        "recursiveToggle"?: DocumentComponentRecursiveToggleState;
        /**
          * Type of Document Component.
         */
        "type"?: string;
        /**
          * Marks the Document Component as expired.
         */
        "vervallen"?: boolean;
        /**
          * The wijzigactie as in STOP.
         */
        "wijzigactie"?: DocumentComponentWijzigactie;
    }
    interface DsoDropdownMenu {
        /**
          * Selector for the element the dropdown options should not be overflowing.
         */
        "boundary"?: string;
        /**
          * Whether the menu is checkable.
         */
        "checkable"?: boolean;
        /**
          * Alignment of the dropdown
         */
        "dropdownAlign"?: "left" | "right";
        /**
          * Space between button and dropdown options
         */
        "dropdownOptionsOffset"?: number;
        /**
          * Whether the menu is open or closed. This attribute is reflected and mutable.
         */
        "open"?: boolean;
        /**
          * Force placement of dropdown.  This property overrides `dropdownAlign`.
         */
        "placement"?: Placement;
        /**
          * Set position strategy of dropdown options
         */
        "strategy"?: "auto" | "absolute" | "fixed";
    }
    interface DsoExpandable {
        /**
          * Set to `true` to show the content animated.
         */
        "enableAnimation"?: boolean;
        /**
          * When enableAnimation is set to `true`, this property specifies the height of this element at which the animation will expand from / collapse to
         */
        "minimumHeight"?: number;
        /**
          * Fired after expanding.
         */
        "onDsoExpandableAnimationEnd"?: (event: DsoExpandableCustomEvent<ExpandableAnimationEndEvent>) => void;
        /**
          * Fired before expanding.
         */
        "onDsoExpandableAnimationStart"?: (event: DsoExpandableCustomEvent<ExpandableAnimationStartEvent>) => void;
        /**
          * Set to `true` to expand the content.
         */
        "open"?: boolean;
    }
    interface DsoHeader {
        /**
          * Used to show the login/logout option. 'none' renders nothing.
         */
        "authStatus"?: "none" | "loggedIn" | "loggedOut";
        /**
          * The URL to open when the user activates "help". If no URL is specified, a button element is used instead.
         */
        "helpUrl"?: string;
        /**
          * When the `authStatus` is `loggedOut` a loginUrl can be provided. The login button will then render as an anchor.
         */
        "loginUrl"?: string;
        /**
          * The URL to open when the user activates "logout". If no URL is specified, a button element is used instead.
         */
        "logoutUrl"?: string;
        /**
          * The main menu items.
         */
        "mainMenu"?: HeaderMenuItem[];
        /**
          * Emitted when something in the header is selected.  `event.detail.type` indicates the functionality the user pressed. eg. `'login'` or `'menuItem'`
         */
        "onDsoHeaderClick"?: (event: DsoHeaderCustomEvent<HeaderEvent>) => void;
        /**
          * Show a help-button or link in the header
         */
        "showHelp"?: boolean | undefined;
        /**
          * Either have the dropdown menu appear automatically or always.
         */
        "useDropDownMenu"?: "always" | "auto";
        /**
          * Set this to true when the user is at "Mijn Omgevingsloket".
         */
        "userHomeActive"?: boolean;
        /**
          * The URL to open when the user activates "Mijn Omgevingsloket".
         */
        "userHomeUrl"?: string;
        /**
          * The name to show when the user is logged in.
         */
        "userProfileName"?: string;
        /**
          * The URL to open when the user activates the profile url.
         */
        "userProfileUrl"?: string;
    }
    interface DsoHelpcenterPanel {
        /**
          * The label on the help button that activates the Helpcenter.
         */
        "label"?: string;
        /**
          * The URL that's loaded when the Helpcenter opens.
         */
        "url": string;
    }
    interface DsoHighlightBox {
        /**
          * For a bordered Highlight Box.
         */
        "border"?: boolean;
        /**
          * For an Highlight Box with a drop shadow.
         */
        "dropShadow"?: boolean;
        /**
          * To create a step indicator.
         */
        "step"?: number;
        /**
          * For a while Highlight Box.
         */
        "white"?: boolean;
        /**
          * For yellow Highlight Box.
         */
        "yellow"?: boolean;
    }
    interface DsoIcon {
        /**
          * The alias of the icon.
         */
        "icon"?: string;
    }
    interface DsoImageOverlay {
        /**
          * The wijzigactie.
         */
        "wijzigactie"?: string;
    }
    interface DsoInfo {
        /**
          * Whether the Info is active.
         */
        "active"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "fixed"?: boolean;
        /**
          * Emitted when the user activates the close button.
         */
        "onDsoClose"?: (event: DsoInfoCustomEvent<MouseEvent>) => void;
    }
    interface DsoInfoButton {
        /**
          * Whether the InfoButton is active.
         */
        "active"?: boolean;
        /**
          * The label.
         */
        "label"?: string;
        /**
          * Emitted when the user activates the Info Button.
         */
        "onDsoToggle"?: (event: DsoInfoButtonCustomEvent<InfoButtonToggleEvent>) => void;
        /**
          * For secondary Info Button.
         */
        "secondary"?: boolean;
    }
    interface DsoInputRange {
        /**
          * The description of the range.
         */
        "description"?: string;
        /**
          * The label of the range.
         */
        "label"?: string;
        /**
          * The maximum value of the range.
         */
        "max"?: number;
        /**
          * The minimum value of the range.
         */
        "min"?: number;
        /**
          * Emitted when the value has changed.
         */
        "onDsoChange"?: (event: DsoInputRangeCustomEvent<InputRangeChangeEvent>) => void;
        /**
          * The step to increment the value by.
         */
        "step"?: number;
        /**
          * The unit of the range.
         */
        "unit"?: string;
        /**
          * The value of the range.
         */
        "value"?: number;
    }
    interface DsoLabel {
        /**
          * For compact Label
         */
        "compact"?: boolean;
        /**
          * Emitted when the user activates the remove button.
         */
        "onDsoRemoveClick"?: (event: DsoLabelCustomEvent<MouseEvent>) => void;
        /**
          * Shows a button that can be used to remove the Label.
         */
        "removable"?: boolean;
        /**
          * The status of this Label.
         */
        "status"?: LabelStatus;
        /**
          * Whether the Label is allowed to truncate the contents if it does not fit the container element.
         */
        "truncate"?: boolean;
    }
    interface DsoLegendItem {
        /**
          * To disable the Legend Item
         */
        "disabled"?: boolean;
        /**
          * Message to be shown behind a toggletip when the Legend Item is disabled
         */
        "disabledMessage"?: string;
        /**
          * Emitted when the mouse enters the Legend Item
         */
        "onDsoMouseEnter"?: (event: DsoLegendItemCustomEvent<any>) => void;
        /**
          * Emitted when the mouse leaves the Legend Item
         */
        "onDsoMouseLeave"?: (event: DsoLegendItemCustomEvent<any>) => void;
        /**
          * Emitted when the user activates the remove button.
         */
        "onDsoRemoveClick"?: (event: DsoLegendItemCustomEvent<LegendItemRemoveClickEvent>) => void;
        /**
          * Shows a trash-can that, when clicked, emits `dsoRemoveClick`.
         */
        "removable"?: boolean;
    }
    interface DsoListButton {
        /**
          * Whether the List Button is checked.
         */
        "checked"?: boolean;
        /**
          * When defined the count can show on the List Button.
         */
        "count"?: number;
        /**
          * Whether the List Button is disabled.
         */
        "disabled"?: boolean;
        /**
          * The label of the List Button.
         */
        "label"?: string;
        /**
          * Allow user to directly input a value.  Set to `false` to force users to use plus/minus buttons.
         */
        "manual"?: boolean;
        /**
          * The maximum value.
         */
        "max"?: string | number;
        /**
          * The minimum value.
         */
        "min"?: string | number;
        /**
          * Emitted when the user changes the count.
         */
        "onDsoCountChange"?: (event: DsoListButtonCustomEvent<ListButtonChangeEvent>) => void;
        /**
          * Emitted when the user activates the List Button itself.  Does not fire when the user activates the count controls.
         */
        "onDsoSelectedChange"?: (event: DsoListButtonCustomEvent<ListButtonSelectedEvent>) => void;
        /**
          * Prefix to subcontent for the purpose of screenreading.
         */
        "subcontentPrefix"?: string;
        /**
          * The sublabel of the List Button.
         */
        "sublabel"?: string;
    }
    interface DsoLogo {
        /**
          * The label clarifies the service within the Omgevingsloket, shown as a subtitle (and on smaller screens as the main wordmark itself).
         */
        "label"?: string;
        /**
          * The url the label is pointing to.
         */
        "labelUrl"?: string;
        /**
          * The url the logo is pointing to.
         */
        "logoUrl"?: string;
        /**
          * An alternative name for the logo wordmark Omgevingsloket. For instance `Environment| Desk`. It should contains a pipe-character: the left-hand side of the pipe will be shown in grasgroen, the right-hand side of the pipe will be shown in bosgroen. When omitted the logo wordmark will default to Omgevingsloket, with 'Omgevings' shown in grasgroen and 'loket' in bosgroen.
         */
        "name"?: string;
        /**
          * Emitted when the label in the logo is clicked (only when labelUrl is set).
         */
        "onDsoLabelClick"?: (event: DsoLogoCustomEvent<LogoLabelClickEvent>) => void;
        /**
          * Emitted when the logo is clicked (only when logoUrl is set).
         */
        "onDsoLogoClick"?: (event: DsoLogoCustomEvent<LogoClickEvent>) => void;
        /**
          * The ribbon contains the text for a possible 'sticker' on top of the logo. Used to clarify the (non-production) server environment ("int", "kta", "pfm", "pre", or "dmo")
         */
        "ribbon"?: string;
    }
    interface DsoMapBaseLayers {
        /**
          * The base layers.
         */
        "baseLayers": BaseLayer[];
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group"?: string;
        /**
          * Emitted when the user checks or unchecks a base layer.
         */
        "onDsoBaseLayerChange"?: (event: DsoMapBaseLayersCustomEvent<BaseLayerChangeEvent>) => void;
    }
    interface DsoMapControls {
        /**
          * To disable the zoom controls:  * `in`: Disable zoom in button. * `out`: Disable zoom out button. * `both`: Disable zoom in and zoom out.
         */
        "disableZoom"?: "in" | "out" | "both";
        /**
          * emits when the panel opens or closes.  - `event.detail.originalEvent` contains the original `MouseEvent / KeyboardEvent` when the panel is toggled by clicking the visibility button or the close button. - `event.detail.open` is true when the panel opens and false when the panel closes.
         */
        "onDsoToggle"?: (event: DsoMapControlsCustomEvent<MapControlsToggleEvent>) => void;
        /**
          * Emitted when the user activates the zoom in button.
         */
        "onDsoZoomIn"?: (event: DsoMapControlsCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the user activates the zoom out button.
         */
        "onDsoZoomOut"?: (event: DsoMapControlsCustomEvent<MouseEvent>) => void;
        /**
          * To show and hide the Map Controls.
         */
        "open"?: boolean;
    }
    interface DsoMapOverlays {
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group"?: string;
        /**
          * Emitted when the user selects a different overlay.
         */
        "onDsoToggleOverlay"?: (event: DsoMapOverlaysCustomEvent<OverlayChangeEvent>) => void;
        /**
          * The overlays.
         */
        "overlays": Overlay[];
    }
    interface DsoMarkBar {
        /**
          * The current (one-based) highlighted search item.
         */
        "current"?: number;
        /**
          * The label for the input field.
         */
        "label"?: string;
        /**
          * Emitted when user activates "clear search result" button.
         */
        "onDsoClear"?: (event: DsoMarkBarCustomEvent<MarkBarClearEvent>) => void;
        /**
          * Emitted each time the user types in the search field.
         */
        "onDsoInput"?: (event: DsoMarkBarCustomEvent<MarkBarInputEvent>) => void;
        /**
          * Emitted when user activates "next search result" button.
         */
        "onDsoNext"?: (event: DsoMarkBarCustomEvent<MarkBarPaginationEvent>) => void;
        /**
          * Emitted when user activates "previous search result" button.
         */
        "onDsoPrevious"?: (event: DsoMarkBarCustomEvent<MarkBarPaginationEvent>) => void;
        /**
          * Total number of search results.
         */
        "totalCount"?: number;
        /**
          * The current search value.
         */
        "value"?: string;
    }
    interface DsoModal {
        /**
          * the role for the modal `dialog` | `alert` | `alertdialog`.
         */
        "dialogRole"?: string | null;
        /**
          * when set the modal will be shown in fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * The title of the Modal.
         */
        "modalTitle"?: string;
        /**
          * Emitted when the user wants to close the Modal.
         */
        "onDsoClose"?: (event: DsoModalCustomEvent<ModalCloseEvent>) => void;
        /**
          * The element to return focus to after the modal is closed.  * `undefined` will return focus to the previously focused element (default). * `false` will not return focus to any element. * or, provide your own `HTMLElement` that will receive focus upon closing.
         */
        "returnFocus"?: false | HTMLElement | undefined;
        /**
          * when `false` the close button in the header will not be rendered. Defaults to `true`.  Needs `modalTitle` to be set.
         */
        "showCloseButton"?: boolean;
    }
    interface DsoOzonContent {
        /**
          * The XML to be rendered.
         */
        "content"?: OzonContentInputType;
        /**
          * Setting this property creates dso-ozon-content as inline element instead of a block element.
         */
        "inline"?: boolean;
        /**
          * To mark text.
         */
        "mark"?: OzonContentMarkFunction;
        /**
          * Emitted when `<a>` is clicked.
         */
        "onDsoAnchorClick"?: (event: DsoOzonContentCustomEvent<OzonContentAnchorClickEvent>) => void;
        /**
          * Emitted when a marked item is highlighted.
         */
        "onDsoOzonContentMarkItemHighlight"?: (event: DsoOzonContentCustomEvent<OzonContentMarkItemHighlightEvent>) => void;
    }
    interface DsoPagination {
        /**
          * Current page
         */
        "currentPage"?: number;
        /**
          * This function is called to format the href
         */
        "formatHref"?: (page: number) => string;
        /**
          * Emitted on page select
         */
        "onDsoSelectPage"?: (event: DsoPaginationCustomEvent<PaginationSelectPageEvent>) => void;
        /**
          * Total pages
         */
        "totalPages"?: number;
    }
    interface DsoPanel {
        /**
          * Emitted when the user click the close button.
         */
        "onDsoCloseClick"?: (event: DsoPanelCustomEvent<PanelCloseEvent>) => void;
    }
    interface DsoPlekinfoCard {
        /**
          * Makes the PlekinfoCard active.
         */
        "active"?: boolean;
        /**
          * The URL to which the PlekinfoCard heading links.
         */
        "href": string | undefined;
        /**
          * Emitted when the PlekinfoCard heading is clicked.
         */
        "onDsoPlekinfoCardClick"?: (event: DsoPlekinfoCardCustomEvent<PlekinfoCardClickEvent>) => void;
        /**
          * Opens the urls in a new window or tab
         */
        "targetBlank"?: boolean;
        /**
          * An optional 'wijzigactie' that signals if the plekinfo on the card is added or removed.
         */
        "wijzigactie"?: PlekinfoWijzigactie;
    }
    interface DsoProgressBar {
        /**
          * When the operation completes.
         */
        "max"?: number;
        /**
          * From where progress is made.
         */
        "min"?: number;
        /**
          * The current progress. Should be between `min` and `max`.
         */
        "progress": number;
    }
    interface DsoProgressIndicator {
        /**
          * Set for bloatier Progress Indicator.
         */
        "block"?: boolean;
        /**
          * The label of the Progress Indicator.
         */
        "label"?: string;
        /**
          * The size (width) of the Progress Indicator.  If no size is set, falls back to `small`.
         */
        "size"?: "small" | "medium" | "large";
    }
    interface DsoProjectItem {
        /**
          * The label of the project item.
         */
        "label"?: string;
    }
    /**
     * Met dit component kan een `RenvooiValue` worden gepresenteerd.
     */
    interface DsoRenvooi {
        /**
          * The renvooi value to render.
         */
        "value"?: RenvooiValue | RenvooiValue[];
    }
    interface DsoResponsiveElement {
        /**
          * Emitted when size has changed
         */
        "onDsoSizeChange"?: (event: DsoResponsiveElementCustomEvent<ResponsiveElementSize>) => void;
    }
    interface DsoScrollable {
        /**
          * Event emitted when the scrollbar has reached top or bottom.
         */
        "onDsoScrollEnd"?: (event: DsoScrollableCustomEvent<DsoScrollEndEvent>) => void;
    }
    interface DsoSelectable {
        /**
          * Mark the Selectable as checked
         */
        "checked"?: boolean;
        /**
          * To link this control to an element that describes it.
         */
        "describedById"?: string;
        /**
          * To disable the Selectable.
         */
        "disabled"?: boolean;
        /**
          * To set `<input id>` attribute for external references.
         */
        "identifier"?: string;
        /**
          * An indeterminate state is neither true or false. It means the answer is somewhere in between.  Can be used to indicate child Selectables that are a mix of checked and unchecked.
         */
        "indeterminate"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "infoFixed"?: boolean;
        /**
          * Set to true of the current value is not valid.
         */
        "invalid"?: boolean;
        /**
          * To link this control to an element that labels it.
         */
        "labelledById"?: string;
        /**
          * Name of the Selectable. Can be used to group Selectables.
         */
        "name"?: string;
        /**
          * Emitted when the user checks or unchecks the Selectable.
         */
        "onDsoChange"?: (event: DsoSelectableCustomEvent<SelectableChangeEvent>) => void;
        /**
          * To mark the Selectable as required.
         */
        "required"?: boolean;
        /**
          * Type of Selectable.  `checkbox`: Multiple options `radio`: Single option.
         */
        "type": "checkbox" | "radio";
        /**
          * The value of the Selectable.
         */
        "value": string;
    }
    interface DsoSkiplink {
        /**
          * link text
         */
        "label": string | undefined;
        /**
          * Emitted when the Skiplink is clicked.
         */
        "onDsoSkiplinkClick"?: (event: DsoSkiplinkCustomEvent<SkiplinkClickEvent>) => void;
        /**
          * The location to which the skiplink links.
         */
        "to": string | undefined;
    }
    interface DsoSlideToggle {
        /**
          * When provided the `<button>` will be labelled with `aria-label`. For a visible label provide a `<span>` inside the component.
         */
        "accessibleLabel"?: string;
        /**
          * Set to true if Slide Toggle is checked.
         */
        "checked"?: boolean;
        /**
          * Disables the Slide Toggle, preventing it from checking/unchecking and therefor not emitting any events.
         */
        "disabled"?: boolean;
        /**
          * Provide an `id` for the `<button>`. Useful for placing your to place your own `<label for="id">`.
         */
        "identifier"?: string;
        /**
          * Provide the `id` of the element that labels this element. this property sets the `aria-labelledby` on the switch button.
         */
        "labelledbyId"?: string;
        /**
          * Emitted when user checks or unchecks the Slide Toggle.
         */
        "onDsoActiveChange"?: (event: DsoSlideToggleCustomEvent<SlideToggleActiveEvent>) => void;
    }
    interface DsoTab {
        /**
          * Makes the tab active. The tab for which the tabpanel is visible is the active tab.
         */
        "active"?: boolean;
        /**
          * Disables the tab. A disabled tab cannot be activated and it's tabpanel cannot be shown.
         */
        "disabled"?: boolean;
        /**
          * The optional href of the tab. Creates an anchor if present. Creates a button if absent.
         */
        "href"?: string;
        /**
          * Emitted when the user activates tab via click or arrow keys followed by space or enter.
         */
        "onDsoTabSwitch"?: (event: DsoTabCustomEvent<TabsSwitchEvent>) => void;
    }
    interface DsoTable {
        /**
          * Indicates whether the table is currently horizontally scrollable.
         */
        "isResponsive"?: boolean;
        /**
          * Prevents the table being opened in a modal.
         */
        "noModal"?: boolean;
    }
    interface DsoTabs {
    }
    interface DsoToggletip {
        /**
          * Toggletip label.
         */
        "label"?: string;
        /**
          * Toggletip position.
         */
        "position"?: Placement;
        /**
          * Set to true for secondary Toggletip.
         */
        "secondary"?: boolean;
        /**
          * Set to true for small Toggletip.
         */
        "small"?: boolean;
    }
    interface DsoTooltip {
        /**
          * Whether or not to show the tooltip. To control the tooltip add the `active` attribute or use the `activate()` and `deactivate()` instance methods.
         */
        "active"?: boolean;
        /**
          * Defines if the tooltip is descriptive. A descriptive tooltip contains a meaningful message. Tooltips that are not descriptive are hidden from screenreaders using `aria-hidden`.
         */
        "descriptive"?: boolean;
        /**
          * Set attribute `no-arrow` to hide the arrow
         */
        "noArrow"?: boolean;
        /**
          * Set position of tooltip relative to target
         */
        "position"?: Placement;
        /**
          * Defines if the tooltip has a smaller max-width
         */
        "small"?: boolean;
        /**
          * Deactivates mouseover behaviour
         */
        "stateless"?: boolean;
        /**
          * Set position strategy of tooltip
         */
        "strategy"?: "auto" | "absolute" | "fixed";
    }
    interface DsoTreeView {
        /**
          * The collection of TreeViewItems
         */
        "collection": TreeViewItem[];
        /**
          * Emitted when a tree view item is clicked. The `detail` property of the `CustomEvent` will contain an object with: `path` = the complete path of TreeViewItems from the root to the item that is emitting the clicked event. `originalEvent` = the original click event. The consumer of the event is responsible for updating the TreeView's collection (usually set the active state on the last TreeViewItem in path and clear all other active item states).
         */
        "onDsoClickItem"?: (event: DsoTreeViewCustomEvent<TreeViewPointerEvent>) => void;
        /**
          * Emitted when a tree view item is closed. The `detail` property of the `CustomEvent` will contain the complete path of TreeViewItems from the root to the item that is emitting the close event. The consumer of the event is responsible for updating the TreeView's collection (usually set the closed state on the last TreeViewItem in path).
         */
        "onDsoCloseItem"?: (event: DsoTreeViewCustomEvent<TreeViewItem[]>) => void;
        /**
          * Emitted when a tree view item is opened. The `detail` property of the `CustomEvent` will contain the complete path of TreeViewItems from the root to the item that is emitting the open event. The consumer of the event is responsible for updating the TreeView's collection (usually set the open state on the last TreeViewItem in path).
         */
        "onDsoOpenItem"?: (event: DsoTreeViewCustomEvent<TreeViewItem[]>) => void;
    }
    interface DsoViewerGrid {
        /**
          * Set active tab in tab view.
         */
        "activeTab"?: ViewerGridVdkTab | ViewerGridVrkTab;
        /**
          * **VDK only.** Set to true when document panel should show.
         */
        "documentPanelOpen"?: boolean;
        /**
          * **VDK only.** Size of the panel when component loads.  Default size is `large`.
         */
        "documentPanelSize"?: ViewerGridPanelSize;
        /**
          * Set to true when filterpanel should show.
         */
        "filterpanelOpen"?: boolean;
        /**
          * **VDK only.** Set to show main panel expanded.
         */
        "mainPanelExpanded"?: boolean;
        /**
          * **VDK only.** Set to hide the main panel.
         */
        "mainPanelHidden"?: boolean;
        /**
          * Size of the panel when component loads.  Default size is `large`.
         */
        "mainSize"?: ViewerGridPanelSize;
        /**
          * VRK or VDK implementation.
         */
        "mode"?: ViewerGridMode;
        /**
          * Emitted when user applies filterpanel options.
         */
        "onDsoActiveTabSwitch"?: (event: DsoViewerGridCustomEvent<ViewerGridActiveTabSwitchEvent>) => void;
        /**
          * Emitted when user wants to close the overlay.
         */
        "onDsoCloseOverlay"?: (event: DsoViewerGridCustomEvent<ViewerGridCloseOverlayEvent>) => void;
        /**
          * **VDK only.** Emitted on interaction with sizing buttons.
         */
        "onDsoDocumentPanelSizeChange"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeEvent>) => void;
        /**
          * **VDK only.** Emitted after main size animation.
         */
        "onDsoDocumentPanelSizeChangeAnimationEnd"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeAnimationEndEvent>) => void;
        /**
          * Emitted when user applies filterpanel options.
         */
        "onDsoFilterpanelApply"?: (event: DsoViewerGridCustomEvent<ViewerGridFilterpanelApplyEvent>) => void;
        /**
          * Emitted when user cancels filterpanel.
         */
        "onDsoFilterpanelCancel"?: (event: DsoViewerGridCustomEvent<ViewerGridFilterpanelCancelEvent>) => void;
        /**
          * **VDK only.** Emitted when the user wants to expand the main panel.
         */
        "onDsoMainPanelExpand"?: (event: DsoViewerGridCustomEvent<ViewerGridMainExpandEvent>) => void;
        /**
          * **VDK only.** Emitted when the user toggles the visibility of the main panel.  Also emitted by scripting when the panels do not fit anymore.
         */
        "onDsoMainPanelToggle"?: (event: DsoViewerGridCustomEvent<ViewerGridMainToggleEvent>) => void;
        /**
          * Emitted on interaction with sizing buttons.
         */
        "onDsoMainSizeChange"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeEvent>) => void;
        /**
          * Emitted after main size animation.
         */
        "onDsoMainSizeChangeAnimationEnd"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeAnimationEndEvent>) => void;
        /**
          * Set to true when overlay should show.
         */
        "overlayOpen"?: boolean;
    }
    interface DsotDocumentComponentDemo {
        /**
          * Name of the file to load.
         */
        "jsonFile"?: string;
        /**
          * The mode of the Document Component. One of "document" or "table-of-contents". Defaults to "document"
         */
        "mode"?: DocumentComponentMode;
        /**
          * To demo user interacting with IntRef or IntIoRef elements.
         */
        "onDsotOzonContentAnchorClick"?: (event: DsotDocumentComponentDemoCustomEvent<DocumentComponentOzonContentAnchorClickEvent>) => void;
        /**
          * To demo user interacting the heading in mode="table-of-contents".
         */
        "onDsotTableOfContentsClick"?: (event: DsotDocumentComponentDemoCustomEvent<DocumentComponentTableOfContentsClickEvent>) => void;
        /**
          * The default state for all Document Components.
         */
        "openDefault"?: boolean;
        /**
          * Show canvas to where Document Component extends.
         */
        "showCanvas"?: boolean;
    }
    interface IntrinsicElements {
        "dso-accordion": DsoAccordion;
        "dso-accordion-section": DsoAccordionSection;
        "dso-action-list": DsoActionList;
        "dso-action-list-item": DsoActionListItem;
        "dso-advanced-select": DsoAdvancedSelect;
        "dso-alert": DsoAlert;
        "dso-annotation-activiteit": DsoAnnotationActiviteit;
        "dso-annotation-gebiedsaanwijzing": DsoAnnotationGebiedsaanwijzing;
        "dso-annotation-kaart": DsoAnnotationKaart;
        "dso-annotation-locatie": DsoAnnotationLocatie;
        "dso-annotation-omgevingsnormwaarde": DsoAnnotationOmgevingsnormwaarde;
        "dso-attachments-counter": DsoAttachmentsCounter;
        "dso-autosuggest": DsoAutosuggest;
        "dso-badge": DsoBadge;
        "dso-banner": DsoBanner;
        "dso-card": DsoCard;
        "dso-card-container": DsoCardContainer;
        "dso-date-picker": DsoDatePicker;
        "dso-date-picker-legacy": DsoDatePickerLegacy;
        "dso-document-card": DsoDocumentCard;
        "dso-document-component": DsoDocumentComponent;
        "dso-dropdown-menu": DsoDropdownMenu;
        "dso-expandable": DsoExpandable;
        "dso-header": DsoHeader;
        "dso-helpcenter-panel": DsoHelpcenterPanel;
        "dso-highlight-box": DsoHighlightBox;
        "dso-icon": DsoIcon;
        "dso-image-overlay": DsoImageOverlay;
        "dso-info": DsoInfo;
        "dso-info-button": DsoInfoButton;
        "dso-input-range": DsoInputRange;
        "dso-label": DsoLabel;
        "dso-legend-item": DsoLegendItem;
        "dso-list-button": DsoListButton;
        "dso-logo": DsoLogo;
        "dso-map-base-layers": DsoMapBaseLayers;
        "dso-map-controls": DsoMapControls;
        "dso-map-overlays": DsoMapOverlays;
        "dso-mark-bar": DsoMarkBar;
        "dso-modal": DsoModal;
        "dso-ozon-content": DsoOzonContent;
        "dso-pagination": DsoPagination;
        "dso-panel": DsoPanel;
        "dso-plekinfo-card": DsoPlekinfoCard;
        "dso-progress-bar": DsoProgressBar;
        "dso-progress-indicator": DsoProgressIndicator;
        "dso-project-item": DsoProjectItem;
        "dso-renvooi": DsoRenvooi;
        "dso-responsive-element": DsoResponsiveElement;
        "dso-scrollable": DsoScrollable;
        "dso-selectable": DsoSelectable;
        "dso-skiplink": DsoSkiplink;
        "dso-slide-toggle": DsoSlideToggle;
        "dso-tab": DsoTab;
        "dso-table": DsoTable;
        "dso-tabs": DsoTabs;
        "dso-toggletip": DsoToggletip;
        "dso-tooltip": DsoTooltip;
        "dso-tree-view": DsoTreeView;
        "dso-viewer-grid": DsoViewerGrid;
        "dsot-document-component-demo": DsotDocumentComponentDemo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dso-accordion": LocalJSX.DsoAccordion & JSXBase.HTMLAttributes<HTMLDsoAccordionElement>;
            "dso-accordion-section": LocalJSX.DsoAccordionSection & JSXBase.HTMLAttributes<HTMLDsoAccordionSectionElement>;
            "dso-action-list": LocalJSX.DsoActionList & JSXBase.HTMLAttributes<HTMLDsoActionListElement>;
            "dso-action-list-item": LocalJSX.DsoActionListItem & JSXBase.HTMLAttributes<HTMLDsoActionListItemElement>;
            "dso-advanced-select": LocalJSX.DsoAdvancedSelect & JSXBase.HTMLAttributes<HTMLDsoAdvancedSelectElement>;
            "dso-alert": LocalJSX.DsoAlert & JSXBase.HTMLAttributes<HTMLDsoAlertElement>;
            "dso-annotation-activiteit": LocalJSX.DsoAnnotationActiviteit & JSXBase.HTMLAttributes<HTMLDsoAnnotationActiviteitElement>;
            "dso-annotation-gebiedsaanwijzing": LocalJSX.DsoAnnotationGebiedsaanwijzing & JSXBase.HTMLAttributes<HTMLDsoAnnotationGebiedsaanwijzingElement>;
            "dso-annotation-kaart": LocalJSX.DsoAnnotationKaart & JSXBase.HTMLAttributes<HTMLDsoAnnotationKaartElement>;
            "dso-annotation-locatie": LocalJSX.DsoAnnotationLocatie & JSXBase.HTMLAttributes<HTMLDsoAnnotationLocatieElement>;
            /**
             * Dit component wordt voor een Omgevingsnorm en Omgevingswaarde gebruikt.
             */
            "dso-annotation-omgevingsnormwaarde": LocalJSX.DsoAnnotationOmgevingsnormwaarde & JSXBase.HTMLAttributes<HTMLDsoAnnotationOmgevingsnormwaardeElement>;
            "dso-attachments-counter": LocalJSX.DsoAttachmentsCounter & JSXBase.HTMLAttributes<HTMLDsoAttachmentsCounterElement>;
            "dso-autosuggest": LocalJSX.DsoAutosuggest & JSXBase.HTMLAttributes<HTMLDsoAutosuggestElement>;
            "dso-badge": LocalJSX.DsoBadge & JSXBase.HTMLAttributes<HTMLDsoBadgeElement>;
            "dso-banner": LocalJSX.DsoBanner & JSXBase.HTMLAttributes<HTMLDsoBannerElement>;
            "dso-card": LocalJSX.DsoCard & JSXBase.HTMLAttributes<HTMLDsoCardElement>;
            "dso-card-container": LocalJSX.DsoCardContainer & JSXBase.HTMLAttributes<HTMLDsoCardContainerElement>;
            "dso-date-picker": LocalJSX.DsoDatePicker & JSXBase.HTMLAttributes<HTMLDsoDatePickerElement>;
            "dso-date-picker-legacy": LocalJSX.DsoDatePickerLegacy & JSXBase.HTMLAttributes<HTMLDsoDatePickerLegacyElement>;
            "dso-document-card": LocalJSX.DsoDocumentCard & JSXBase.HTMLAttributes<HTMLDsoDocumentCardElement>;
            "dso-document-component": LocalJSX.DsoDocumentComponent & JSXBase.HTMLAttributes<HTMLDsoDocumentComponentElement>;
            "dso-dropdown-menu": LocalJSX.DsoDropdownMenu & JSXBase.HTMLAttributes<HTMLDsoDropdownMenuElement>;
            "dso-expandable": LocalJSX.DsoExpandable & JSXBase.HTMLAttributes<HTMLDsoExpandableElement>;
            "dso-header": LocalJSX.DsoHeader & JSXBase.HTMLAttributes<HTMLDsoHeaderElement>;
            "dso-helpcenter-panel": LocalJSX.DsoHelpcenterPanel & JSXBase.HTMLAttributes<HTMLDsoHelpcenterPanelElement>;
            "dso-highlight-box": LocalJSX.DsoHighlightBox & JSXBase.HTMLAttributes<HTMLDsoHighlightBoxElement>;
            "dso-icon": LocalJSX.DsoIcon & JSXBase.HTMLAttributes<HTMLDsoIconElement>;
            "dso-image-overlay": LocalJSX.DsoImageOverlay & JSXBase.HTMLAttributes<HTMLDsoImageOverlayElement>;
            "dso-info": LocalJSX.DsoInfo & JSXBase.HTMLAttributes<HTMLDsoInfoElement>;
            "dso-info-button": LocalJSX.DsoInfoButton & JSXBase.HTMLAttributes<HTMLDsoInfoButtonElement>;
            "dso-input-range": LocalJSX.DsoInputRange & JSXBase.HTMLAttributes<HTMLDsoInputRangeElement>;
            "dso-label": LocalJSX.DsoLabel & JSXBase.HTMLAttributes<HTMLDsoLabelElement>;
            "dso-legend-item": LocalJSX.DsoLegendItem & JSXBase.HTMLAttributes<HTMLDsoLegendItemElement>;
            "dso-list-button": LocalJSX.DsoListButton & JSXBase.HTMLAttributes<HTMLDsoListButtonElement>;
            "dso-logo": LocalJSX.DsoLogo & JSXBase.HTMLAttributes<HTMLDsoLogoElement>;
            "dso-map-base-layers": LocalJSX.DsoMapBaseLayers & JSXBase.HTMLAttributes<HTMLDsoMapBaseLayersElement>;
            "dso-map-controls": LocalJSX.DsoMapControls & JSXBase.HTMLAttributes<HTMLDsoMapControlsElement>;
            "dso-map-overlays": LocalJSX.DsoMapOverlays & JSXBase.HTMLAttributes<HTMLDsoMapOverlaysElement>;
            "dso-mark-bar": LocalJSX.DsoMarkBar & JSXBase.HTMLAttributes<HTMLDsoMarkBarElement>;
            "dso-modal": LocalJSX.DsoModal & JSXBase.HTMLAttributes<HTMLDsoModalElement>;
            "dso-ozon-content": LocalJSX.DsoOzonContent & JSXBase.HTMLAttributes<HTMLDsoOzonContentElement>;
            "dso-pagination": LocalJSX.DsoPagination & JSXBase.HTMLAttributes<HTMLDsoPaginationElement>;
            "dso-panel": LocalJSX.DsoPanel & JSXBase.HTMLAttributes<HTMLDsoPanelElement>;
            "dso-plekinfo-card": LocalJSX.DsoPlekinfoCard & JSXBase.HTMLAttributes<HTMLDsoPlekinfoCardElement>;
            "dso-progress-bar": LocalJSX.DsoProgressBar & JSXBase.HTMLAttributes<HTMLDsoProgressBarElement>;
            "dso-progress-indicator": LocalJSX.DsoProgressIndicator & JSXBase.HTMLAttributes<HTMLDsoProgressIndicatorElement>;
            "dso-project-item": LocalJSX.DsoProjectItem & JSXBase.HTMLAttributes<HTMLDsoProjectItemElement>;
            /**
             * Met dit component kan een `RenvooiValue` worden gepresenteerd.
             */
            "dso-renvooi": LocalJSX.DsoRenvooi & JSXBase.HTMLAttributes<HTMLDsoRenvooiElement>;
            "dso-responsive-element": LocalJSX.DsoResponsiveElement & JSXBase.HTMLAttributes<HTMLDsoResponsiveElementElement>;
            "dso-scrollable": LocalJSX.DsoScrollable & JSXBase.HTMLAttributes<HTMLDsoScrollableElement>;
            "dso-selectable": LocalJSX.DsoSelectable & JSXBase.HTMLAttributes<HTMLDsoSelectableElement>;
            "dso-skiplink": LocalJSX.DsoSkiplink & JSXBase.HTMLAttributes<HTMLDsoSkiplinkElement>;
            "dso-slide-toggle": LocalJSX.DsoSlideToggle & JSXBase.HTMLAttributes<HTMLDsoSlideToggleElement>;
            "dso-tab": LocalJSX.DsoTab & JSXBase.HTMLAttributes<HTMLDsoTabElement>;
            "dso-table": LocalJSX.DsoTable & JSXBase.HTMLAttributes<HTMLDsoTableElement>;
            "dso-tabs": LocalJSX.DsoTabs & JSXBase.HTMLAttributes<HTMLDsoTabsElement>;
            "dso-toggletip": LocalJSX.DsoToggletip & JSXBase.HTMLAttributes<HTMLDsoToggletipElement>;
            "dso-tooltip": LocalJSX.DsoTooltip & JSXBase.HTMLAttributes<HTMLDsoTooltipElement>;
            "dso-tree-view": LocalJSX.DsoTreeView & JSXBase.HTMLAttributes<HTMLDsoTreeViewElement>;
            "dso-viewer-grid": LocalJSX.DsoViewerGrid & JSXBase.HTMLAttributes<HTMLDsoViewerGridElement>;
            "dsot-document-component-demo": LocalJSX.DsotDocumentComponentDemo & JSXBase.HTMLAttributes<HTMLDsotDocumentComponentDemoElement>;
        }
    }
}
