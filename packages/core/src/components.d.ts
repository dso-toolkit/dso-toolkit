/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AccordionInternalState, AccordionVariant } from "./components/accordion/accordion.interfaces";
import { AccordionHeading, AccordionSectionAnimationEndEvent, AccordionSectionState, AccordionSectionToggleClickEvent } from "./components/accordion/components/accordion-section.interfaces";
import { AnnotationButtonClickEvent } from "./components/annotation-button/annotation-button";
import { AnnotationOutputCloseEvent } from "./components/annotation-output/annotation-output";
import { Suggestion } from "./components/autosuggest/autosuggest.interfaces";
import { DsoCardClickedEvent, ImageShape } from "./components/card/card.interfaces";
import { CardContainerMode } from "./components/card-container/card-container.interfaces";
import { DatePickerChangeEvent, DatePickerFocusEvent, DatePickerKeyboardEvent } from "./components/date-picker/date-picker.interfaces";
import { DocumentComponentOpenToggleEvent, DocumentComponentOzonContentAnchorClickEvent, DocumentComponentToggleAnnotationEvent, DocumentComponentWijzigactie } from "./components/document-component/document-component.models";
import { Placement } from "@popperjs/core";
import { ExpandableAnimationEndEvent } from "./components/expandable/expandable";
import { HeaderEvent, HeaderMenuItem } from "./components/header/header.interfaces";
import { InfoButtonToggleEvent } from "./components/info-button/info-button.interfaces";
import { ListButtonChangeEvent, ListButtonSelectedEvent } from "./components/list-button/list-button.interfaces";
import { BaseLayer, BaseLayerChangeEvent } from "./components/map-base-layers/map-base-layers.interfaces";
import { MapControlsToggleEvent } from "./components/map-controls/map-controls.interfaces";
import { Overlay, OverlayChangeEvent } from "./components/map-overlays/map-overlays.interfaces";
import { ModalCloseEvent } from "./components/modal/modal.interfaces";
import { OzonContentAnchorClickEvent } from "./components/ozon-content/ozon-content.interfaces";
import { PaginationSelectPageEvent } from "./components/pagination/pagination.interfaces";
import { ResponsiveElementSize } from "./components/responsive-element/responsive-element.interfaces";
import { DsoScrollEndEvent } from "./components/scrollable/scrollable.interfaces";
import { SelectableChangeEvent } from "./components/selectable/selectable.interfaces";
import { SlideToggleActiveEvent } from "./components/slide-toggle/slide-toggle.interfaces";
import { TreeViewItem, TreeViewPointerEvent } from "./components/tree-view/tree-view.interfaces";
import { ViewerGridActiveTabSwitchEvent, ViewerGridChangeSizeAnimationEndEvent, ViewerGridChangeSizeEvent, ViewerGridCloseOverlayEvent, ViewerGridFilterpanelApplyEvent, ViewerGridFilterpanelCancelEvent, ViewerGridMainExpandEvent, ViewerGridMainToggleEvent, ViewerGridMode, ViewerGridPanelSize, ViewerGridVdkTab, ViewerGridVrkTab } from "./components/viewer-grid/viewer-grid.interfaces";
export { AccordionInternalState, AccordionVariant } from "./components/accordion/accordion.interfaces";
export { AccordionHeading, AccordionSectionAnimationEndEvent, AccordionSectionState, AccordionSectionToggleClickEvent } from "./components/accordion/components/accordion-section.interfaces";
export { AnnotationButtonClickEvent } from "./components/annotation-button/annotation-button";
export { AnnotationOutputCloseEvent } from "./components/annotation-output/annotation-output";
export { Suggestion } from "./components/autosuggest/autosuggest.interfaces";
export { DsoCardClickedEvent, ImageShape } from "./components/card/card.interfaces";
export { CardContainerMode } from "./components/card-container/card-container.interfaces";
export { DatePickerChangeEvent, DatePickerFocusEvent, DatePickerKeyboardEvent } from "./components/date-picker/date-picker.interfaces";
export { DocumentComponentOpenToggleEvent, DocumentComponentOzonContentAnchorClickEvent, DocumentComponentToggleAnnotationEvent, DocumentComponentWijzigactie } from "./components/document-component/document-component.models";
export { Placement } from "@popperjs/core";
export { ExpandableAnimationEndEvent } from "./components/expandable/expandable";
export { HeaderEvent, HeaderMenuItem } from "./components/header/header.interfaces";
export { InfoButtonToggleEvent } from "./components/info-button/info-button.interfaces";
export { ListButtonChangeEvent, ListButtonSelectedEvent } from "./components/list-button/list-button.interfaces";
export { BaseLayer, BaseLayerChangeEvent } from "./components/map-base-layers/map-base-layers.interfaces";
export { MapControlsToggleEvent } from "./components/map-controls/map-controls.interfaces";
export { Overlay, OverlayChangeEvent } from "./components/map-overlays/map-overlays.interfaces";
export { ModalCloseEvent } from "./components/modal/modal.interfaces";
export { OzonContentAnchorClickEvent } from "./components/ozon-content/ozon-content.interfaces";
export { PaginationSelectPageEvent } from "./components/pagination/pagination.interfaces";
export { ResponsiveElementSize } from "./components/responsive-element/responsive-element.interfaces";
export { DsoScrollEndEvent } from "./components/scrollable/scrollable.interfaces";
export { SelectableChangeEvent } from "./components/selectable/selectable.interfaces";
export { SlideToggleActiveEvent } from "./components/slide-toggle/slide-toggle.interfaces";
export { TreeViewItem, TreeViewPointerEvent } from "./components/tree-view/tree-view.interfaces";
export { ViewerGridActiveTabSwitchEvent, ViewerGridChangeSizeAnimationEndEvent, ViewerGridChangeSizeEvent, ViewerGridCloseOverlayEvent, ViewerGridFilterpanelApplyEvent, ViewerGridFilterpanelCancelEvent, ViewerGridMainExpandEvent, ViewerGridMainToggleEvent, ViewerGridMode, ViewerGridPanelSize, ViewerGridVdkTab, ViewerGridVrkTab } from "./components/viewer-grid/viewer-grid.interfaces";
export namespace Components {
    interface DsoAccordion {
        "_getState": () => Promise<AccordionInternalState>;
        /**
          * Places the chevron at the opposite side.  Note: this mode does not display `state`, `attachmentCount` or `status` props on Accordion Sections
         */
        "reverseAlign": boolean;
        /**
          * The variant of the Accordion.
         */
        "variant": AccordionVariant;
    }
    interface DsoAccordionSection {
        /**
          * `attachmentCount` takes precedence over `icon`
         */
        "attachmentCount"?: number;
        /**
          * The title of the handle
         */
        "handleTitle"?: string;
        /**
          * When set the handle will render as a `<a>`. When undefined it renders as a `<button>`
         */
        "handleUrl"?: string;
        /**
          * Which heading element to use.
         */
        "heading": AccordionHeading;
        /**
          * To set an icon in the heading handle.
         */
        "icon"?: string;
        /**
          * Set the Accordion Section open.
         */
        "open": boolean;
        /**
          * `state` takes precedence over `attachmentCount` and `icon`
         */
        "status"?: AccordionSectionState;
        /**
          * The status of the section.
         */
        "statusDescription"?: string;
    }
    interface DsoActionList {
        /**
          * The title.
         */
        "listTitle": string;
    }
    interface DsoActionListItem {
        /**
          * Places a dashed line at the bottom of the item.
         */
        "divider": boolean;
        /**
          * Show flow line to next step
         */
        "flowLine": boolean;
        /**
          * The title of the item.
         */
        "itemTitle"?: string;
        /**
          * The step of the Action List Item.
         */
        "step": number;
        /**
          * When there is a warning.
         */
        "warning": boolean;
    }
    interface DsoAlert {
        /**
          * Whether or not to show the role attribute with value "alert". To control the tooltip add the `role-alert` attribute.
         */
        "roleAlert"?: boolean;
        /**
          * Set status of alert
         */
        "status": "success" | "info" | "warning" | "error";
    }
    interface DsoAnnotationButton {
        /**
          * To link the Annotation Button with `aria-controls` to a different element, most likely an Annotation Output.
         */
        "identifier": string | undefined;
        /**
          * Set to true when the annotation is open.
         */
        "open": boolean;
    }
    interface DsoAnnotationOutput {
        /**
          * This text will be displayed above the annotation-output when opened
         */
        "annotationPrefix"?: string;
        /**
          * The annotation-button that toggles this component should have the same identifier.
         */
        "identifier": string;
        /**
          * Set to `true` to show content.
         */
        "open": boolean;
    }
    interface DsoAttachmentsCounter {
        /**
          * The number of attachments.
         */
        "count": number;
    }
    interface DsoAutosuggest {
        /**
          * Shows progress indicator when fetching results.
         */
        "loading": boolean;
        /**
          * To delay progress indicator showing (in ms).
         */
        "loadingDelayed"?: number;
        /**
          * To override progress indicator's default loading label.
         */
        "loadingLabel"?: string;
        /**
          * To show text when no results are found.
         */
        "notFoundLabel"?: string;
        /**
          * Whether the previous suggestions will be presented when the input gets focus again.
         */
        "suggestOnFocus": boolean;
        /**
          * The suggestions for the value of the slotted input element. Optionally a Suggestion can have a `type` and `item`.  The `type` is used to style the suggestion. `item` can be use to reference the original object that was used to create the suggestion.  The value should be null when no suggestions have been fetched.
         */
        "suggestions": Suggestion[] | null;
    }
    interface DsoBadge {
        /**
          * The status of the Badge.
         */
        "status"?: "primary" | "success" | "info" | "warning" | "danger" | "error" | "outline" | "attention";
    }
    interface DsoBanner {
        /**
          * compact mode.
         */
        "compact": boolean;
        /**
          * *Only available when `compact` is set to `true`.  Option to show banner icon.
         */
        "noIcon": boolean;
        /**
          * The status of the banner.
         */
        "status": "danger" | "error" | "info" | "warning";
    }
    interface DsoCard {
        /**
          * Whether or not the Card is clickable.
         */
        "clickable": boolean;
        /**
          * Do not use, this is set programmatically by the component.
         */
        "hasImage": boolean;
        /**
          * Presentation of image in header.  - "normal" ("24 x 24").  - "wide" ("30 x 26")
         */
        "imageShape": ImageShape;
        /**
          * Do not use, this is set programmatically by the component.
         */
        "isSelectable": boolean;
    }
    interface DsoCardContainer {
        /**
          * The mode of the Card Container.
         */
        "mode": CardContainerMode;
    }
    interface DsoDatePicker {
        /**
          * ID of element that describes the input element
         */
        "describedBy"?: string;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Should the input be focused on load?
         */
        "dsoAutofocus": boolean;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier": string | undefined;
        /**
          * Is input invalid?
         */
        "invalid"?: boolean;
        /**
          * Maximum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the min property.
         */
        "max": string | undefined;
        /**
          * Minimum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the max property.
         */
        "min": string | undefined;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * Should the input be marked as required?
         */
        "required": boolean;
        /**
          * Date value. Must be in Dutch date format: DD-MM-YYYY.
         */
        "value": string;
    }
    interface DsoDocumentComponent {
        /**
          * An alternative title to show when there is nothing to create a title.
         */
        "alternativeTitle"?: string;
        /**
          * Enables annotations.
         */
        "annotated": boolean;
        /**
          * Marks as draft.
         */
        "bevatOntwerpInformatie": boolean;
        /**
          * Marks this Document Component as belonging to an active filter.
         */
        "filtered": boolean;
        /**
          * When a child Document Component has a status "Draft".
         */
        "genesteOntwerpInformatie": boolean;
        /**
          * Marks Document Component as reserved.
         */
        "gereserveerd": boolean;
        /**
          * The heading element to use.
         */
        "heading": "h2" | "h3" | "h4" | "h5" | "h6";
        /**
          * The Inhoud XML.
         */
        "inhoud"?: string;
        /**
          * The Label XML.
         */
        "label"?: string;
        /**
          * Marks this Document Component as not-applicable.
         */
        "notApplicable": boolean;
        /**
          * The Nummer XML.
         */
        "nummer"?: string;
        /**
          * This boolean attribute indicates whether the children are visible.
         */
        "open": boolean;
        /**
          * When the Annotation Output is opened, set this to true.
         */
        "openAnnotation": boolean;
        /**
          * The Opschrift XML.
         */
        "opschrift"?: string;
        /**
          * Type of Document Component.
         */
        "type"?: string;
        /**
          * Marks the Document Component as expired.
         */
        "vervallen": boolean;
        /**
          * The wijzigactie as in STOP.
         */
        "wijzigactie"?: DocumentComponentWijzigactie;
    }
    interface DsoDropdownMenu {
        /**
          * Selector for the element the dropdown options should not be overflowing.
         */
        "boundary"?: string;
        /**
          * Whether the menu is checkable.
         */
        "checkable": boolean;
        /**
          * Alignment of the dropdown
         */
        "dropdownAlign": "left" | "right";
        /**
          * Space between button and dropdown options
         */
        "dropdownOptionsOffset": number;
        /**
          * Whether the menu is open or closed. This attribute is reflected and mutable.
         */
        "open": boolean;
        /**
          * Force placement of dropdown.  This property overrides `dropdownAlign`.
         */
        "placement"?: Placement;
        /**
          * Set position strategy of dropdown options
         */
        "strategy": "auto" | "absolute" | "fixed";
    }
    interface DsoExpandable {
        /**
          * Set to `true` to show the content animated.
         */
        "enableAnimation": boolean;
        /**
          * When enableAnimation is set to `true`, this property specifies the height of this element at which the animation will expand from / collapse to
         */
        "minimumHeight"?: number;
        /**
          * Set to `true` to expand the content.
         */
        "open"?: boolean;
    }
    interface DsoHeader {
        /**
          * Used to show the login/logout option. 'none' renders nothing.
         */
        "authStatus": "none" | "loggedIn" | "loggedOut";
        /**
          * When the `authStatus` is `loggedOut` a loginUrl can be provided, the login button will render as an anchor.
         */
        "loginUrl"?: string;
        /**
          * The URL to open when the user activates "logout".
         */
        "logoutUrl"?: string;
        /**
          * The main menu items.
         */
        "mainMenu"?: HeaderMenuItem[];
        "ribbon": string;
        /**
          * Either have the dropdown menu appear automatically or always.
         */
        "useDropDownMenu": "always" | "auto";
        /**
          * Set this to true when the user is at "Mijn Omgevingsloket".
         */
        "userHomeActive"?: boolean;
        /**
          * The URL to open when the user activates "Mijn Omgevingsloket".
         */
        "userHomeUrl"?: string;
        /**
          * The name to show when the user is logged in.
         */
        "userProfileName"?: string;
        /**
          * The URL to open when the user activates the profile url.
         */
        "userProfileUrl"?: string;
    }
    interface DsoHelpcenterPanel {
        /**
          * The label on the help button that activates the Helpcenter.
         */
        "label": string;
        /**
          * The URL that's loaded when the Helpcenter opens.
         */
        "url": string;
    }
    interface DsoHighlightBox {
        /**
          * For a bordered Highlight Box.
         */
        "border"?: boolean;
        /**
          * For an Highlight Box with a drop shadow.
         */
        "dropShadow"?: boolean;
        /**
          * To create a step indicator.
         */
        "step"?: number;
        /**
          * For a while Highlight Box.
         */
        "white"?: boolean;
        /**
          * For yellow Highlight Box.
         */
        "yellow"?: boolean;
    }
    interface DsoIcon {
        /**
          * The alias of the icon.
         */
        "icon"?: string;
    }
    interface DsoImageOverlay {
    }
    interface DsoInfo {
        /**
          * Whether the Info is active.
         */
        "active"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "fixed"?: boolean;
    }
    interface DsoInfoButton {
        /**
          * Whether the InfoButton is active.
         */
        "active"?: boolean;
        /**
          * The label.
         */
        "label": string;
        /**
          * For secondary Info Button.
         */
        "secondary"?: boolean;
        /**
          * To set focus to the toggle button.
         */
        "setFocus": () => Promise<void>;
    }
    interface DsoLabel {
        "_truncateLabel": () => Promise<void>;
        /**
          * For compact Label
         */
        "compact"?: boolean;
        /**
          * Shows a button that can be used to remove the Label.
         */
        "removable"?: boolean;
        /**
          * The status of this Label.
         */
        "status"?: "primary" | "info" | "success" | "warning" | "danger" | "error" | "bright" | "attention";
        /**
          * Whether the Label is allowed to truncate the contents if it does not fit the container element.
         */
        "truncate"?: boolean;
    }
    interface DsoListButton {
        /**
          * Whether the List Button is checked.
         */
        "checked": boolean;
        /**
          * When defined the count can show on the List Button.
         */
        "count"?: number;
        /**
          * Whether the List Button is disabled.
         */
        "disabled": boolean;
        /**
          * The label of the List Button.
         */
        "label"?: string;
        /**
          * Allow user to directly input a value.  Set to `false` to force users to use plus/minus buttons.
         */
        "manual": boolean;
        /**
          * The maximum value.
         */
        "max"?: string | number;
        /**
          * The minimum value.
         */
        "min"?: string | number;
        /**
          * The sublabel of the List Button.
         */
        "sublabel"?: string;
    }
    interface DsoLogo {
        /**
          * The label clarifies the service within the Omgevingsloket, shown as a subtitle (and on smaller screens as the main wordmark itself).
         */
        "label"?: string;
        /**
          * The ribbon contains the text for a possible tag on top of the logo. Used to clarify status of the page, like 'beta'. Max-length: 20 characters.
         */
        "ribbon"?: string;
    }
    interface DsoMapBaseLayers {
        /**
          * The base layers.
         */
        "baseLayers": BaseLayer[];
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group": string;
    }
    interface DsoMapControls {
        /**
          * To disable the zoom controls:  * `in`: Disable zoom in button. * `out`: Disable zoom out button. * `both`: Disable zoom in and zoom out.
         */
        "disableZoom"?: "in" | "out" | "both";
        /**
          * To show and hide the Map Controls.
         */
        "open": boolean;
        /**
          * Emitted when the visibility is toggled.  Can be used to recalculate map widths or reposition center when the Map Controls opens or closes.
          * @param e
         */
        "toggleVisibility": (e: MouseEvent | KeyboardEvent) => Promise<void>;
    }
    interface DsoMapOverlays {
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group": string;
        /**
          * The overlays.
         */
        "overlays": Overlay[];
    }
    interface DsoModal {
        /**
          * when set the modal will be shown in fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * The title of the Modal.
         */
        "modalTitle"?: string;
        /**
          * the role for the modal `dialog` | `alert` | `alertdialog`.
         */
        "role": string | null;
        /**
          * when `false` the close button in the header will not be rendered. Defaults to `true`.  Needs `modalTitle` to be set.
         */
        "showCloseButton": boolean;
    }
    interface DsoOzonContent {
        /**
          * The XML to be rendered.
         */
        "content": string | undefined;
        /**
          * Setting this property creates dso-ozon-content as inline element instead of a block element.
         */
        "inline": boolean;
    }
    interface DsoPagination {
        /**
          * Current page
         */
        "currentPage"?: number;
        /**
          * This function is called to format the href
         */
        "formatHref": (page: number) => string;
        /**
          * Total pages
         */
        "totalPages"?: number;
    }
    interface DsoProgressBar {
        /**
          * When the operation completes.
         */
        "max": number;
        /**
          * From where progress is made.
         */
        "min": number;
        /**
          * The current progress. Should be between `min` and `max`.
         */
        "progress": number;
    }
    interface DsoProgressIndicator {
        /**
          * Set for bloatier Progress Indicator.
         */
        "block"?: boolean;
        /**
          * The label of the Progress Indicator.
         */
        "label": string;
        /**
          * The size (width) of the Progress Indicator.  If no size is set, falls back to `small`.
         */
        "size"?: "small" | "medium" | "large";
    }
    interface DsoResponsiveElement {
        /**
          * The current size
         */
        "getSize": () => Promise<ResponsiveElementSize>;
    }
    interface DsoScrollable {
        "_setScrollState": () => Promise<void>;
    }
    interface DsoSelectable {
        /**
          * Mark the Selectable as checked
         */
        "checked"?: boolean;
        /**
          * To link this control to an element that describes it.
         */
        "describedById"?: string;
        /**
          * To disable the Selectable.
         */
        "disabled"?: boolean;
        /**
          * To set `<input id>` attribute for external references.
         */
        "identifier"?: string;
        /**
          * An indeterminate state is neither true or false. It means the answer is somewhere in between.  Can be used to indicate child Selectables that are a mix of checked and unchecked.
         */
        "indeterminate"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "infoFixed"?: boolean;
        /**
          * Set to true of the current value is not valid.
         */
        "invalid"?: boolean;
        /**
          * To link this control to an element that labels it.
         */
        "labelledById"?: string;
        /**
          * Name of the Selectable. Can be used to group Selectables.
         */
        "name"?: string;
        /**
          * To mark the Selectable as required.
         */
        "required"?: boolean;
        /**
          * Method to toggle the Info. Is set to `active` when passed.  If `active` is not passed, Info is toggled to opposite value.
          * @param active
         */
        "toggleInfo": (active?: boolean) => Promise<void>;
        /**
          * Type of Selectable.  `checkbox`: Multiple options `radio`: Single option.
         */
        "type": "checkbox" | "radio";
        /**
          * The value of the Selectable.
         */
        "value": string;
    }
    interface DsoSlideToggle {
        /**
          * When provided the `<button>` will be labelled with `aria-label`. For a visible label provide a `<span>` inside the component.
         */
        "accessibleLabel"?: string;
        /**
          * Set to true if Slide Toggle is checked.
         */
        "checked": boolean;
        /**
          * Disables the Slide Toggle, preventing it from checking/unchecking and therefor not emitting any events.
         */
        "disabled": boolean;
        /**
          * Provide an `id` for the `<button>`. Useful for placing your to place your own `<label for="id">`.
         */
        "identifier": string;
        /**
          * Provide the `id` of the element that labels this element. this property sets the `aria-labelledby` on the switch button.
         */
        "labelledbyId"?: string;
    }
    interface DsoTable {
        /**
          * Indicates whether the table is currently horizontally scrollable.
         */
        "isResponsive": boolean;
        /**
          * Prevents the table being opened in a modal.
         */
        "noModal": boolean;
    }
    interface DsoToggletip {
        /**
          * Toggletip label.
         */
        "label": string;
        /**
          * Toggletip position.
         */
        "position": "top" | "right" | "bottom" | "left";
        /**
          * Set to true for secondary Toggletip.
         */
        "secondary"?: boolean;
        /**
          * Set to true for small Toggletip.
         */
        "small"?: boolean;
    }
    interface DsoTooltip {
        /**
          * Activate the tooltip (Sets the `active` attribute)
         */
        "activate": () => Promise<void>;
        /**
          * Whether or not to show the tooltip. To control the tooltip add the `active` attribute or use the `activate()` and `deactivate()` instance methods.
         */
        "active": boolean;
        /**
          * Deactivate the tooltip (Removes the `active` attribute)
         */
        "deactivate": () => Promise<void>;
        /**
          * Defines if the tooltip is descriptive. A descriptive tooltip contains a meaningful message. Tooltips that are not descriptive are hidden from screenreaders using `aria-hidden`.
         */
        "descriptive": boolean;
        /**
          * Set attribute `no-arrow` to hide the arrow
         */
        "noArrow": boolean;
        /**
          * Set position of tooltip relative to target
         */
        "position": "top" | "right" | "bottom" | "left";
        /**
          * Defines if the tooltip has a smaller max-width
         */
        "small"?: boolean;
        /**
          * Deactivates mouseover behaviour
         */
        "stateless"?: boolean;
        /**
          * Set position strategy of tooltip
         */
        "strategy": "auto" | "absolute" | "fixed";
    }
    interface DsoTreeView {
        /**
          * The collection of TreeViewItems
         */
        "collection": TreeViewItem[];
        /**
          * Set focus on the last item in the specified path. The consumer is responsible for providing a TreeView collection where the last item is visible.
          * @async 
          * @returns Whether the item was found.
         */
        "focusItem": (path: TreeViewItem[]) => Promise<boolean>;
    }
    interface DsoViewerGrid {
        "_checkMainPanelVisibility": () => Promise<void>;
        /**
          * Set active tab in tab view.
         */
        "activeTab"?: ViewerGridVdkTab | ViewerGridVrkTab;
        /**
          * **VDK only.** Set to true when document panel should show.
         */
        "documentPanelOpen": boolean;
        /**
          * **VDK only.** Size of the panel when component loads.  Default size is `large`.
         */
        "documentPanelSize": ViewerGridPanelSize;
        /**
          * Set to true when filterpanel should show.
         */
        "filterpanelOpen": boolean;
        /**
          * **VDK only.** Set to show main panel expanded.
         */
        "mainPanelExpanded": boolean;
        /**
          * **VDK only.** Set to hide the main panel.
         */
        "mainPanelHidden": boolean;
        /**
          * Size of the panel when component loads.  Default size is `large`.
         */
        "mainSize": ViewerGridPanelSize;
        /**
          * VRK or VDK implementation.
         */
        "mode": ViewerGridMode;
        /**
          * Set to true when overlay should show.
         */
        "overlayOpen": boolean;
    }
    interface DsotDocumentComponentDemo {
        /**
          * Name of the file to load.
         */
        "jsonFile"?: string;
        /**
          * The default state for all Document Components.
         */
        "openDefault": boolean;
        /**
          * Show canvas to where Document Component extends.
         */
        "showCanvas": boolean;
    }
}
export interface DsoAccordionSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAccordionSectionElement;
}
export interface DsoAnnotationButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationButtonElement;
}
export interface DsoAnnotationOutputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAnnotationOutputElement;
}
export interface DsoAutosuggestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoAutosuggestElement;
}
export interface DsoCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoCardElement;
}
export interface DsoDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoDatePickerElement;
}
export interface DsoDocumentComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoDocumentComponentElement;
}
export interface DsoExpandableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoExpandableElement;
}
export interface DsoHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoHeaderElement;
}
export interface DsoInfoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoInfoElement;
}
export interface DsoInfoButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoInfoButtonElement;
}
export interface DsoLabelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoLabelElement;
}
export interface DsoListButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoListButtonElement;
}
export interface DsoMapBaseLayersCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMapBaseLayersElement;
}
export interface DsoMapControlsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMapControlsElement;
}
export interface DsoMapOverlaysCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoMapOverlaysElement;
}
export interface DsoModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoModalElement;
}
export interface DsoOzonContentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoOzonContentElement;
}
export interface DsoPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoPaginationElement;
}
export interface DsoResponsiveElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoResponsiveElementElement;
}
export interface DsoScrollableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoScrollableElement;
}
export interface DsoSelectableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoSelectableElement;
}
export interface DsoSlideToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoSlideToggleElement;
}
export interface DsoTreeViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoTreeViewElement;
}
export interface DsoViewerGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsoViewerGridElement;
}
export interface DsotDocumentComponentDemoCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDsotDocumentComponentDemoElement;
}
declare global {
    interface HTMLDsoAccordionElement extends Components.DsoAccordion, HTMLStencilElement {
    }
    var HTMLDsoAccordionElement: {
        prototype: HTMLDsoAccordionElement;
        new (): HTMLDsoAccordionElement;
    };
    interface HTMLDsoAccordionSectionElement extends Components.DsoAccordionSection, HTMLStencilElement {
    }
    var HTMLDsoAccordionSectionElement: {
        prototype: HTMLDsoAccordionSectionElement;
        new (): HTMLDsoAccordionSectionElement;
    };
    interface HTMLDsoActionListElement extends Components.DsoActionList, HTMLStencilElement {
    }
    var HTMLDsoActionListElement: {
        prototype: HTMLDsoActionListElement;
        new (): HTMLDsoActionListElement;
    };
    interface HTMLDsoActionListItemElement extends Components.DsoActionListItem, HTMLStencilElement {
    }
    var HTMLDsoActionListItemElement: {
        prototype: HTMLDsoActionListItemElement;
        new (): HTMLDsoActionListItemElement;
    };
    interface HTMLDsoAlertElement extends Components.DsoAlert, HTMLStencilElement {
    }
    var HTMLDsoAlertElement: {
        prototype: HTMLDsoAlertElement;
        new (): HTMLDsoAlertElement;
    };
    interface HTMLDsoAnnotationButtonElement extends Components.DsoAnnotationButton, HTMLStencilElement {
    }
    var HTMLDsoAnnotationButtonElement: {
        prototype: HTMLDsoAnnotationButtonElement;
        new (): HTMLDsoAnnotationButtonElement;
    };
    interface HTMLDsoAnnotationOutputElement extends Components.DsoAnnotationOutput, HTMLStencilElement {
    }
    var HTMLDsoAnnotationOutputElement: {
        prototype: HTMLDsoAnnotationOutputElement;
        new (): HTMLDsoAnnotationOutputElement;
    };
    interface HTMLDsoAttachmentsCounterElement extends Components.DsoAttachmentsCounter, HTMLStencilElement {
    }
    var HTMLDsoAttachmentsCounterElement: {
        prototype: HTMLDsoAttachmentsCounterElement;
        new (): HTMLDsoAttachmentsCounterElement;
    };
    interface HTMLDsoAutosuggestElement extends Components.DsoAutosuggest, HTMLStencilElement {
    }
    var HTMLDsoAutosuggestElement: {
        prototype: HTMLDsoAutosuggestElement;
        new (): HTMLDsoAutosuggestElement;
    };
    interface HTMLDsoBadgeElement extends Components.DsoBadge, HTMLStencilElement {
    }
    var HTMLDsoBadgeElement: {
        prototype: HTMLDsoBadgeElement;
        new (): HTMLDsoBadgeElement;
    };
    interface HTMLDsoBannerElement extends Components.DsoBanner, HTMLStencilElement {
    }
    var HTMLDsoBannerElement: {
        prototype: HTMLDsoBannerElement;
        new (): HTMLDsoBannerElement;
    };
    interface HTMLDsoCardElement extends Components.DsoCard, HTMLStencilElement {
    }
    var HTMLDsoCardElement: {
        prototype: HTMLDsoCardElement;
        new (): HTMLDsoCardElement;
    };
    interface HTMLDsoCardContainerElement extends Components.DsoCardContainer, HTMLStencilElement {
    }
    var HTMLDsoCardContainerElement: {
        prototype: HTMLDsoCardContainerElement;
        new (): HTMLDsoCardContainerElement;
    };
    interface HTMLDsoDatePickerElement extends Components.DsoDatePicker, HTMLStencilElement {
    }
    var HTMLDsoDatePickerElement: {
        prototype: HTMLDsoDatePickerElement;
        new (): HTMLDsoDatePickerElement;
    };
    interface HTMLDsoDocumentComponentElement extends Components.DsoDocumentComponent, HTMLStencilElement {
    }
    var HTMLDsoDocumentComponentElement: {
        prototype: HTMLDsoDocumentComponentElement;
        new (): HTMLDsoDocumentComponentElement;
    };
    interface HTMLDsoDropdownMenuElement extends Components.DsoDropdownMenu, HTMLStencilElement {
    }
    var HTMLDsoDropdownMenuElement: {
        prototype: HTMLDsoDropdownMenuElement;
        new (): HTMLDsoDropdownMenuElement;
    };
    interface HTMLDsoExpandableElement extends Components.DsoExpandable, HTMLStencilElement {
    }
    var HTMLDsoExpandableElement: {
        prototype: HTMLDsoExpandableElement;
        new (): HTMLDsoExpandableElement;
    };
    interface HTMLDsoHeaderElement extends Components.DsoHeader, HTMLStencilElement {
    }
    var HTMLDsoHeaderElement: {
        prototype: HTMLDsoHeaderElement;
        new (): HTMLDsoHeaderElement;
    };
    interface HTMLDsoHelpcenterPanelElement extends Components.DsoHelpcenterPanel, HTMLStencilElement {
    }
    var HTMLDsoHelpcenterPanelElement: {
        prototype: HTMLDsoHelpcenterPanelElement;
        new (): HTMLDsoHelpcenterPanelElement;
    };
    interface HTMLDsoHighlightBoxElement extends Components.DsoHighlightBox, HTMLStencilElement {
    }
    var HTMLDsoHighlightBoxElement: {
        prototype: HTMLDsoHighlightBoxElement;
        new (): HTMLDsoHighlightBoxElement;
    };
    interface HTMLDsoIconElement extends Components.DsoIcon, HTMLStencilElement {
    }
    var HTMLDsoIconElement: {
        prototype: HTMLDsoIconElement;
        new (): HTMLDsoIconElement;
    };
    interface HTMLDsoImageOverlayElement extends Components.DsoImageOverlay, HTMLStencilElement {
    }
    var HTMLDsoImageOverlayElement: {
        prototype: HTMLDsoImageOverlayElement;
        new (): HTMLDsoImageOverlayElement;
    };
    interface HTMLDsoInfoElement extends Components.DsoInfo, HTMLStencilElement {
    }
    var HTMLDsoInfoElement: {
        prototype: HTMLDsoInfoElement;
        new (): HTMLDsoInfoElement;
    };
    interface HTMLDsoInfoButtonElement extends Components.DsoInfoButton, HTMLStencilElement {
    }
    var HTMLDsoInfoButtonElement: {
        prototype: HTMLDsoInfoButtonElement;
        new (): HTMLDsoInfoButtonElement;
    };
    interface HTMLDsoLabelElement extends Components.DsoLabel, HTMLStencilElement {
    }
    var HTMLDsoLabelElement: {
        prototype: HTMLDsoLabelElement;
        new (): HTMLDsoLabelElement;
    };
    interface HTMLDsoListButtonElement extends Components.DsoListButton, HTMLStencilElement {
    }
    var HTMLDsoListButtonElement: {
        prototype: HTMLDsoListButtonElement;
        new (): HTMLDsoListButtonElement;
    };
    interface HTMLDsoLogoElement extends Components.DsoLogo, HTMLStencilElement {
    }
    var HTMLDsoLogoElement: {
        prototype: HTMLDsoLogoElement;
        new (): HTMLDsoLogoElement;
    };
    interface HTMLDsoMapBaseLayersElement extends Components.DsoMapBaseLayers, HTMLStencilElement {
    }
    var HTMLDsoMapBaseLayersElement: {
        prototype: HTMLDsoMapBaseLayersElement;
        new (): HTMLDsoMapBaseLayersElement;
    };
    interface HTMLDsoMapControlsElement extends Components.DsoMapControls, HTMLStencilElement {
    }
    var HTMLDsoMapControlsElement: {
        prototype: HTMLDsoMapControlsElement;
        new (): HTMLDsoMapControlsElement;
    };
    interface HTMLDsoMapOverlaysElement extends Components.DsoMapOverlays, HTMLStencilElement {
    }
    var HTMLDsoMapOverlaysElement: {
        prototype: HTMLDsoMapOverlaysElement;
        new (): HTMLDsoMapOverlaysElement;
    };
    interface HTMLDsoModalElement extends Components.DsoModal, HTMLStencilElement {
    }
    var HTMLDsoModalElement: {
        prototype: HTMLDsoModalElement;
        new (): HTMLDsoModalElement;
    };
    interface HTMLDsoOzonContentElement extends Components.DsoOzonContent, HTMLStencilElement {
    }
    var HTMLDsoOzonContentElement: {
        prototype: HTMLDsoOzonContentElement;
        new (): HTMLDsoOzonContentElement;
    };
    interface HTMLDsoPaginationElement extends Components.DsoPagination, HTMLStencilElement {
    }
    var HTMLDsoPaginationElement: {
        prototype: HTMLDsoPaginationElement;
        new (): HTMLDsoPaginationElement;
    };
    interface HTMLDsoProgressBarElement extends Components.DsoProgressBar, HTMLStencilElement {
    }
    var HTMLDsoProgressBarElement: {
        prototype: HTMLDsoProgressBarElement;
        new (): HTMLDsoProgressBarElement;
    };
    interface HTMLDsoProgressIndicatorElement extends Components.DsoProgressIndicator, HTMLStencilElement {
    }
    var HTMLDsoProgressIndicatorElement: {
        prototype: HTMLDsoProgressIndicatorElement;
        new (): HTMLDsoProgressIndicatorElement;
    };
    interface HTMLDsoResponsiveElementElement extends Components.DsoResponsiveElement, HTMLStencilElement {
    }
    var HTMLDsoResponsiveElementElement: {
        prototype: HTMLDsoResponsiveElementElement;
        new (): HTMLDsoResponsiveElementElement;
    };
    interface HTMLDsoScrollableElement extends Components.DsoScrollable, HTMLStencilElement {
    }
    var HTMLDsoScrollableElement: {
        prototype: HTMLDsoScrollableElement;
        new (): HTMLDsoScrollableElement;
    };
    interface HTMLDsoSelectableElement extends Components.DsoSelectable, HTMLStencilElement {
    }
    var HTMLDsoSelectableElement: {
        prototype: HTMLDsoSelectableElement;
        new (): HTMLDsoSelectableElement;
    };
    interface HTMLDsoSlideToggleElement extends Components.DsoSlideToggle, HTMLStencilElement {
    }
    var HTMLDsoSlideToggleElement: {
        prototype: HTMLDsoSlideToggleElement;
        new (): HTMLDsoSlideToggleElement;
    };
    interface HTMLDsoTableElement extends Components.DsoTable, HTMLStencilElement {
    }
    var HTMLDsoTableElement: {
        prototype: HTMLDsoTableElement;
        new (): HTMLDsoTableElement;
    };
    interface HTMLDsoToggletipElement extends Components.DsoToggletip, HTMLStencilElement {
    }
    var HTMLDsoToggletipElement: {
        prototype: HTMLDsoToggletipElement;
        new (): HTMLDsoToggletipElement;
    };
    interface HTMLDsoTooltipElement extends Components.DsoTooltip, HTMLStencilElement {
    }
    var HTMLDsoTooltipElement: {
        prototype: HTMLDsoTooltipElement;
        new (): HTMLDsoTooltipElement;
    };
    interface HTMLDsoTreeViewElement extends Components.DsoTreeView, HTMLStencilElement {
    }
    var HTMLDsoTreeViewElement: {
        prototype: HTMLDsoTreeViewElement;
        new (): HTMLDsoTreeViewElement;
    };
    interface HTMLDsoViewerGridElement extends Components.DsoViewerGrid, HTMLStencilElement {
    }
    var HTMLDsoViewerGridElement: {
        prototype: HTMLDsoViewerGridElement;
        new (): HTMLDsoViewerGridElement;
    };
    interface HTMLDsotDocumentComponentDemoElement extends Components.DsotDocumentComponentDemo, HTMLStencilElement {
    }
    var HTMLDsotDocumentComponentDemoElement: {
        prototype: HTMLDsotDocumentComponentDemoElement;
        new (): HTMLDsotDocumentComponentDemoElement;
    };
    interface HTMLElementTagNameMap {
        "dso-accordion": HTMLDsoAccordionElement;
        "dso-accordion-section": HTMLDsoAccordionSectionElement;
        "dso-action-list": HTMLDsoActionListElement;
        "dso-action-list-item": HTMLDsoActionListItemElement;
        "dso-alert": HTMLDsoAlertElement;
        "dso-annotation-button": HTMLDsoAnnotationButtonElement;
        "dso-annotation-output": HTMLDsoAnnotationOutputElement;
        "dso-attachments-counter": HTMLDsoAttachmentsCounterElement;
        "dso-autosuggest": HTMLDsoAutosuggestElement;
        "dso-badge": HTMLDsoBadgeElement;
        "dso-banner": HTMLDsoBannerElement;
        "dso-card": HTMLDsoCardElement;
        "dso-card-container": HTMLDsoCardContainerElement;
        "dso-date-picker": HTMLDsoDatePickerElement;
        "dso-document-component": HTMLDsoDocumentComponentElement;
        "dso-dropdown-menu": HTMLDsoDropdownMenuElement;
        "dso-expandable": HTMLDsoExpandableElement;
        "dso-header": HTMLDsoHeaderElement;
        "dso-helpcenter-panel": HTMLDsoHelpcenterPanelElement;
        "dso-highlight-box": HTMLDsoHighlightBoxElement;
        "dso-icon": HTMLDsoIconElement;
        "dso-image-overlay": HTMLDsoImageOverlayElement;
        "dso-info": HTMLDsoInfoElement;
        "dso-info-button": HTMLDsoInfoButtonElement;
        "dso-label": HTMLDsoLabelElement;
        "dso-list-button": HTMLDsoListButtonElement;
        "dso-logo": HTMLDsoLogoElement;
        "dso-map-base-layers": HTMLDsoMapBaseLayersElement;
        "dso-map-controls": HTMLDsoMapControlsElement;
        "dso-map-overlays": HTMLDsoMapOverlaysElement;
        "dso-modal": HTMLDsoModalElement;
        "dso-ozon-content": HTMLDsoOzonContentElement;
        "dso-pagination": HTMLDsoPaginationElement;
        "dso-progress-bar": HTMLDsoProgressBarElement;
        "dso-progress-indicator": HTMLDsoProgressIndicatorElement;
        "dso-responsive-element": HTMLDsoResponsiveElementElement;
        "dso-scrollable": HTMLDsoScrollableElement;
        "dso-selectable": HTMLDsoSelectableElement;
        "dso-slide-toggle": HTMLDsoSlideToggleElement;
        "dso-table": HTMLDsoTableElement;
        "dso-toggletip": HTMLDsoToggletipElement;
        "dso-tooltip": HTMLDsoTooltipElement;
        "dso-tree-view": HTMLDsoTreeViewElement;
        "dso-viewer-grid": HTMLDsoViewerGridElement;
        "dsot-document-component-demo": HTMLDsotDocumentComponentDemoElement;
    }
}
declare namespace LocalJSX {
    interface DsoAccordion {
        /**
          * Places the chevron at the opposite side.  Note: this mode does not display `state`, `attachmentCount` or `status` props on Accordion Sections
         */
        "reverseAlign"?: boolean;
        /**
          * The variant of the Accordion.
         */
        "variant"?: AccordionVariant;
    }
    interface DsoAccordionSection {
        /**
          * `attachmentCount` takes precedence over `icon`
         */
        "attachmentCount"?: number;
        /**
          * The title of the handle
         */
        "handleTitle"?: string;
        /**
          * When set the handle will render as a `<a>`. When undefined it renders as a `<button>`
         */
        "handleUrl"?: string;
        /**
          * Which heading element to use.
         */
        "heading"?: AccordionHeading;
        /**
          * To set an icon in the heading handle.
         */
        "icon"?: string;
        /**
          * Event emitted when the Accordion Section completes its toggle animation.
         */
        "onDsoAnimationEnd"?: (event: DsoAccordionSectionCustomEvent<AccordionSectionAnimationEndEvent>) => void;
        /**
          * Emitted when the user activates the toggle button.
         */
        "onDsoToggleClick"?: (event: DsoAccordionSectionCustomEvent<AccordionSectionToggleClickEvent>) => void;
        /**
          * Set the Accordion Section open.
         */
        "open"?: boolean;
        /**
          * `state` takes precedence over `attachmentCount` and `icon`
         */
        "status"?: AccordionSectionState;
        /**
          * The status of the section.
         */
        "statusDescription"?: string;
    }
    interface DsoActionList {
        /**
          * The title.
         */
        "listTitle": string;
    }
    interface DsoActionListItem {
        /**
          * Places a dashed line at the bottom of the item.
         */
        "divider"?: boolean;
        /**
          * Show flow line to next step
         */
        "flowLine"?: boolean;
        /**
          * The title of the item.
         */
        "itemTitle"?: string;
        /**
          * The step of the Action List Item.
         */
        "step": number;
        /**
          * When there is a warning.
         */
        "warning"?: boolean;
    }
    interface DsoAlert {
        /**
          * Whether or not to show the role attribute with value "alert". To control the tooltip add the `role-alert` attribute.
         */
        "roleAlert"?: boolean;
        /**
          * Set status of alert
         */
        "status": "success" | "info" | "warning" | "error";
    }
    interface DsoAnnotationButton {
        /**
          * To link the Annotation Button with `aria-controls` to a different element, most likely an Annotation Output.
         */
        "identifier": string | undefined;
        /**
          * Emitted when user activates the button.
         */
        "onDsoClick"?: (event: DsoAnnotationButtonCustomEvent<AnnotationButtonClickEvent>) => void;
        /**
          * Set to true when the annotation is open.
         */
        "open"?: boolean;
    }
    interface DsoAnnotationOutput {
        /**
          * This text will be displayed above the annotation-output when opened
         */
        "annotationPrefix"?: string;
        /**
          * The annotation-button that toggles this component should have the same identifier.
         */
        "identifier": string;
        /**
          * This event is emitted when the user activates the Annotation Button.
         */
        "onDsoClose"?: (event: DsoAnnotationOutputCustomEvent<AnnotationOutputCloseEvent>) => void;
        /**
          * Set to `true` to show content.
         */
        "open"?: boolean;
    }
    interface DsoAttachmentsCounter {
        /**
          * The number of attachments.
         */
        "count": number;
    }
    interface DsoAutosuggest {
        /**
          * Shows progress indicator when fetching results.
         */
        "loading"?: boolean;
        /**
          * To delay progress indicator showing (in ms).
         */
        "loadingDelayed"?: number;
        /**
          * To override progress indicator's default loading label.
         */
        "loadingLabel"?: string;
        /**
          * To show text when no results are found.
         */
        "notFoundLabel"?: string;
        /**
          * This is emitted debounced for every change for the slotted input type=text element.
         */
        "onDsoChange"?: (event: DsoAutosuggestCustomEvent<string>) => void;
        /**
          * Emitted when enter is pressed. The `detail` property of the `CustomEvent` will contain the input text.
         */
        "onDsoSearch"?: (event: DsoAutosuggestCustomEvent<string>) => void;
        /**
          * Emitted when a suggestion is selected. The `detail` property of the `CustomEvent` will contain the selected suggestion.
         */
        "onDsoSelect"?: (event: DsoAutosuggestCustomEvent<Suggestion>) => void;
        /**
          * Whether the previous suggestions will be presented when the input gets focus again.
         */
        "suggestOnFocus"?: boolean;
        /**
          * The suggestions for the value of the slotted input element. Optionally a Suggestion can have a `type` and `item`.  The `type` is used to style the suggestion. `item` can be use to reference the original object that was used to create the suggestion.  The value should be null when no suggestions have been fetched.
         */
        "suggestions"?: Suggestion[] | null;
    }
    interface DsoBadge {
        /**
          * The status of the Badge.
         */
        "status"?: "primary" | "success" | "info" | "warning" | "danger" | "error" | "outline" | "attention";
    }
    interface DsoBanner {
        /**
          * compact mode.
         */
        "compact"?: boolean;
        /**
          * *Only available when `compact` is set to `true`.  Option to show banner icon.
         */
        "noIcon"?: boolean;
        /**
          * The status of the banner.
         */
        "status": "danger" | "error" | "info" | "warning";
    }
    interface DsoCard {
        /**
          * Whether or not the Card is clickable.
         */
        "clickable"?: boolean;
        /**
          * Do not use, this is set programmatically by the component.
         */
        "hasImage"?: boolean;
        /**
          * Presentation of image in header.  - "normal" ("24 x 24").  - "wide" ("30 x 26")
         */
        "imageShape"?: ImageShape;
        /**
          * Do not use, this is set programmatically by the component.
         */
        "isSelectable"?: boolean;
        /**
          * Emitted when the Card is clickable and the user clicked the Card.
         */
        "onDsoCardClicked"?: (event: DsoCardCustomEvent<DsoCardClickedEvent>) => void;
    }
    interface DsoCardContainer {
        /**
          * The mode of the Card Container.
         */
        "mode"?: CardContainerMode;
    }
    interface DsoDatePicker {
        /**
          * ID of element that describes the input element
         */
        "describedBy"?: string;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Should the input be focused on load?
         */
        "dsoAutofocus"?: boolean;
        /**
          * Adds a unique identifier for the date picker input. Use this instead of html `id` attribute.
         */
        "identifier"?: string | undefined;
        /**
          * Is input invalid?
         */
        "invalid"?: boolean;
        /**
          * Maximum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the min property.
         */
        "max"?: string | undefined;
        /**
          * Minimum date allowed to be picked. Must be in Dutch date format: DD-MM-YYYY. This setting can be used alone or together with the max property.
         */
        "min"?: string | undefined;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onDsoBlur"?: (event: DsoDatePickerCustomEvent<DatePickerFocusEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onDsoDateChange"?: (event: DsoDatePickerCustomEvent<DatePickerChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onDsoFocus"?: (event: DsoDatePickerCustomEvent<DatePickerFocusEvent>) => void;
        /**
          * Event emitted on key down in the date picker input.
         */
        "onDsoKeyDown"?: (event: DsoDatePickerCustomEvent<DatePickerKeyboardEvent>) => void;
        /**
          * Event emitted on key up in the date picker input.
         */
        "onDsoKeyUp"?: (event: DsoDatePickerCustomEvent<DatePickerKeyboardEvent>) => void;
        /**
          * Should the input be marked as required?
         */
        "required"?: boolean;
        /**
          * Date value. Must be in Dutch date format: DD-MM-YYYY.
         */
        "value"?: string;
    }
    interface DsoDocumentComponent {
        /**
          * An alternative title to show when there is nothing to create a title.
         */
        "alternativeTitle"?: string;
        /**
          * Enables annotations.
         */
        "annotated"?: boolean;
        /**
          * Marks as draft.
         */
        "bevatOntwerpInformatie"?: boolean;
        /**
          * Marks this Document Component as belonging to an active filter.
         */
        "filtered"?: boolean;
        /**
          * When a child Document Component has a status "Draft".
         */
        "genesteOntwerpInformatie"?: boolean;
        /**
          * Marks Document Component as reserved.
         */
        "gereserveerd"?: boolean;
        /**
          * The heading element to use.
         */
        "heading"?: "h2" | "h3" | "h4" | "h5" | "h6";
        /**
          * The Inhoud XML.
         */
        "inhoud"?: string;
        /**
          * The Label XML.
         */
        "label"?: string;
        /**
          * Marks this Document Component as not-applicable.
         */
        "notApplicable"?: boolean;
        /**
          * The Nummer XML.
         */
        "nummer"?: string;
        /**
          * Emitted when the user activates the annotation button.
         */
        "onDsoAnnotationToggle"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentToggleAnnotationEvent>) => void;
        /**
          * Emitted when the user activates the toggle.
         */
        "onDsoOpenToggle"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentOpenToggleEvent>) => void;
        /**
          * Emitted when the user actives intRef or intIoRef anchors in Ozon Content
         */
        "onDsoOzonContentAnchorClick"?: (event: DsoDocumentComponentCustomEvent<DocumentComponentOzonContentAnchorClickEvent>) => void;
        /**
          * This boolean attribute indicates whether the children are visible.
         */
        "open"?: boolean;
        /**
          * When the Annotation Output is opened, set this to true.
         */
        "openAnnotation"?: boolean;
        /**
          * The Opschrift XML.
         */
        "opschrift"?: string;
        /**
          * Type of Document Component.
         */
        "type"?: string;
        /**
          * Marks the Document Component as expired.
         */
        "vervallen"?: boolean;
        /**
          * The wijzigactie as in STOP.
         */
        "wijzigactie"?: DocumentComponentWijzigactie;
    }
    interface DsoDropdownMenu {
        /**
          * Selector for the element the dropdown options should not be overflowing.
         */
        "boundary"?: string;
        /**
          * Whether the menu is checkable.
         */
        "checkable"?: boolean;
        /**
          * Alignment of the dropdown
         */
        "dropdownAlign"?: "left" | "right";
        /**
          * Space between button and dropdown options
         */
        "dropdownOptionsOffset"?: number;
        /**
          * Whether the menu is open or closed. This attribute is reflected and mutable.
         */
        "open"?: boolean;
        /**
          * Force placement of dropdown.  This property overrides `dropdownAlign`.
         */
        "placement"?: Placement;
        /**
          * Set position strategy of dropdown options
         */
        "strategy"?: "auto" | "absolute" | "fixed";
    }
    interface DsoExpandable {
        /**
          * Set to `true` to show the content animated.
         */
        "enableAnimation"?: boolean;
        /**
          * When enableAnimation is set to `true`, this property specifies the height of this element at which the animation will expand from / collapse to
         */
        "minimumHeight"?: number;
        /**
          * Fired when the animation ends. Only when `enableAnimation = true`.
         */
        "onDsoExpandableAnimationEnd"?: (event: DsoExpandableCustomEvent<ExpandableAnimationEndEvent>) => void;
        /**
          * Set to `true` to expand the content.
         */
        "open"?: boolean;
    }
    interface DsoHeader {
        /**
          * Used to show the login/logout option. 'none' renders nothing.
         */
        "authStatus"?: "none" | "loggedIn" | "loggedOut";
        /**
          * When the `authStatus` is `loggedOut` a loginUrl can be provided, the login button will render as an anchor.
         */
        "loginUrl"?: string;
        /**
          * The URL to open when the user activates "logout".
         */
        "logoutUrl"?: string;
        /**
          * The main menu items.
         */
        "mainMenu"?: HeaderMenuItem[];
        /**
          * Emitted when something in the header is selected.  `event.detail.type` indicates the functionality the user pressed. eg. `'login'` or `'menuItem'`
         */
        "onDsoHeaderClick"?: (event: DsoHeaderCustomEvent<HeaderEvent>) => void;
        "ribbon"?: string;
        /**
          * Either have the dropdown menu appear automatically or always.
         */
        "useDropDownMenu"?: "always" | "auto";
        /**
          * Set this to true when the user is at "Mijn Omgevingsloket".
         */
        "userHomeActive"?: boolean;
        /**
          * The URL to open when the user activates "Mijn Omgevingsloket".
         */
        "userHomeUrl"?: string;
        /**
          * The name to show when the user is logged in.
         */
        "userProfileName"?: string;
        /**
          * The URL to open when the user activates the profile url.
         */
        "userProfileUrl"?: string;
    }
    interface DsoHelpcenterPanel {
        /**
          * The label on the help button that activates the Helpcenter.
         */
        "label"?: string;
        /**
          * The URL that's loaded when the Helpcenter opens.
         */
        "url": string;
    }
    interface DsoHighlightBox {
        /**
          * For a bordered Highlight Box.
         */
        "border"?: boolean;
        /**
          * For an Highlight Box with a drop shadow.
         */
        "dropShadow"?: boolean;
        /**
          * To create a step indicator.
         */
        "step"?: number;
        /**
          * For a while Highlight Box.
         */
        "white"?: boolean;
        /**
          * For yellow Highlight Box.
         */
        "yellow"?: boolean;
    }
    interface DsoIcon {
        /**
          * The alias of the icon.
         */
        "icon"?: string;
    }
    interface DsoImageOverlay {
    }
    interface DsoInfo {
        /**
          * Whether the Info is active.
         */
        "active"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "fixed"?: boolean;
        /**
          * Emitted when the user activates the close button.
         */
        "onDsoClose"?: (event: DsoInfoCustomEvent<MouseEvent>) => void;
    }
    interface DsoInfoButton {
        /**
          * Whether the InfoButton is active.
         */
        "active"?: boolean;
        /**
          * The label.
         */
        "label"?: string;
        /**
          * Emitted when the user activates the Info Button.
         */
        "onDsoToggle"?: (event: DsoInfoButtonCustomEvent<InfoButtonToggleEvent>) => void;
        /**
          * For secondary Info Button.
         */
        "secondary"?: boolean;
    }
    interface DsoLabel {
        /**
          * For compact Label
         */
        "compact"?: boolean;
        /**
          * Emitted when the user activates the remove button.
         */
        "onDsoRemoveClick"?: (event: DsoLabelCustomEvent<MouseEvent>) => void;
        /**
          * Shows a button that can be used to remove the Label.
         */
        "removable"?: boolean;
        /**
          * The status of this Label.
         */
        "status"?: "primary" | "info" | "success" | "warning" | "danger" | "error" | "bright" | "attention";
        /**
          * Whether the Label is allowed to truncate the contents if it does not fit the container element.
         */
        "truncate"?: boolean;
    }
    interface DsoListButton {
        /**
          * Whether the List Button is checked.
         */
        "checked"?: boolean;
        /**
          * When defined the count can show on the List Button.
         */
        "count"?: number;
        /**
          * Whether the List Button is disabled.
         */
        "disabled"?: boolean;
        /**
          * The label of the List Button.
         */
        "label"?: string;
        /**
          * Allow user to directly input a value.  Set to `false` to force users to use plus/minus buttons.
         */
        "manual"?: boolean;
        /**
          * The maximum value.
         */
        "max"?: string | number;
        /**
          * The minimum value.
         */
        "min"?: string | number;
        /**
          * Emitted when the user changes the count.
         */
        "onDsoCountChange"?: (event: DsoListButtonCustomEvent<ListButtonChangeEvent>) => void;
        /**
          * Emitted when the user activates the List Button itself.  Does not fire when the user activates the count controls.
         */
        "onDsoSelectedChange"?: (event: DsoListButtonCustomEvent<ListButtonSelectedEvent>) => void;
        /**
          * The sublabel of the List Button.
         */
        "sublabel"?: string;
    }
    interface DsoLogo {
        /**
          * The label clarifies the service within the Omgevingsloket, shown as a subtitle (and on smaller screens as the main wordmark itself).
         */
        "label"?: string;
        /**
          * The ribbon contains the text for a possible tag on top of the logo. Used to clarify status of the page, like 'beta'. Max-length: 20 characters.
         */
        "ribbon"?: string;
    }
    interface DsoMapBaseLayers {
        /**
          * The base layers.
         */
        "baseLayers": BaseLayer[];
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group"?: string;
        /**
          * Emitted when the user checks or unchecks a base layer.
         */
        "onDsoBaseLayerChange"?: (event: DsoMapBaseLayersCustomEvent<BaseLayerChangeEvent>) => void;
    }
    interface DsoMapControls {
        /**
          * To disable the zoom controls:  * `in`: Disable zoom in button. * `out`: Disable zoom out button. * `both`: Disable zoom in and zoom out.
         */
        "disableZoom"?: "in" | "out" | "both";
        /**
          * emits when the panel opens or closes.  - `event.detail.originalEvent` contains the original `MouseEvent / KeyboardEvent` when the panel is toggled by clicking the visibility button or the close button. - `event.detail.open` is true when the panel opens and false when the panel closes.
         */
        "onDsoToggle"?: (event: DsoMapControlsCustomEvent<MapControlsToggleEvent>) => void;
        /**
          * Emitted when the user activates the zoom in button.
         */
        "onDsoZoomIn"?: (event: DsoMapControlsCustomEvent<MouseEvent>) => void;
        /**
          * Emitted when the user activates the zoom out button.
         */
        "onDsoZoomOut"?: (event: DsoMapControlsCustomEvent<MouseEvent>) => void;
        /**
          * To show and hide the Map Controls.
         */
        "open"?: boolean;
    }
    interface DsoMapOverlays {
        /**
          * To group the overlays together. Generally the default value suffices.
         */
        "group"?: string;
        /**
          * Emitted when the user selects a different overlay.
         */
        "onDsoToggleOverlay"?: (event: DsoMapOverlaysCustomEvent<OverlayChangeEvent>) => void;
        /**
          * The overlays.
         */
        "overlays": Overlay[];
    }
    interface DsoModal {
        /**
          * when set the modal will be shown in fullscreen.
         */
        "fullscreen"?: boolean;
        /**
          * The title of the Modal.
         */
        "modalTitle"?: string;
        /**
          * Emitted when the user wants to close the Modal.
         */
        "onDsoClose"?: (event: DsoModalCustomEvent<ModalCloseEvent>) => void;
        /**
          * the role for the modal `dialog` | `alert` | `alertdialog`.
         */
        "role"?: string | null;
        /**
          * when `false` the close button in the header will not be rendered. Defaults to `true`.  Needs `modalTitle` to be set.
         */
        "showCloseButton"?: boolean;
    }
    interface DsoOzonContent {
        /**
          * The XML to be rendered.
         */
        "content"?: string | undefined;
        /**
          * Setting this property creates dso-ozon-content as inline element instead of a block element.
         */
        "inline"?: boolean;
        /**
          * Emitted when `<a>` is clicked.
         */
        "onDsoAnchorClick"?: (event: DsoOzonContentCustomEvent<OzonContentAnchorClickEvent>) => void;
    }
    interface DsoPagination {
        /**
          * Current page
         */
        "currentPage"?: number;
        /**
          * This function is called to format the href
         */
        "formatHref"?: (page: number) => string;
        /**
          * Emitted on page select
         */
        "onDsoSelectPage"?: (event: DsoPaginationCustomEvent<PaginationSelectPageEvent>) => void;
        /**
          * Total pages
         */
        "totalPages"?: number;
    }
    interface DsoProgressBar {
        /**
          * When the operation completes.
         */
        "max"?: number;
        /**
          * From where progress is made.
         */
        "min"?: number;
        /**
          * The current progress. Should be between `min` and `max`.
         */
        "progress": number;
    }
    interface DsoProgressIndicator {
        /**
          * Set for bloatier Progress Indicator.
         */
        "block"?: boolean;
        /**
          * The label of the Progress Indicator.
         */
        "label"?: string;
        /**
          * The size (width) of the Progress Indicator.  If no size is set, falls back to `small`.
         */
        "size"?: "small" | "medium" | "large";
    }
    interface DsoResponsiveElement {
        /**
          * Emitted when size has changed
         */
        "onDsoSizeChange"?: (event: DsoResponsiveElementCustomEvent<ResponsiveElementSize>) => void;
    }
    interface DsoScrollable {
        /**
          * Event emitted when the scrollbar has reached top or bottom.
         */
        "onDsoScrollEnd"?: (event: DsoScrollableCustomEvent<DsoScrollEndEvent>) => void;
    }
    interface DsoSelectable {
        /**
          * Mark the Selectable as checked
         */
        "checked"?: boolean;
        /**
          * To link this control to an element that describes it.
         */
        "describedById"?: string;
        /**
          * To disable the Selectable.
         */
        "disabled"?: boolean;
        /**
          * To set `<input id>` attribute for external references.
         */
        "identifier"?: string;
        /**
          * An indeterminate state is neither true or false. It means the answer is somewhere in between.  Can be used to indicate child Selectables that are a mix of checked and unchecked.
         */
        "indeterminate"?: boolean;
        /**
          * Set to true if the Info should not be toggled and always visible.
         */
        "infoFixed"?: boolean;
        /**
          * Set to true of the current value is not valid.
         */
        "invalid"?: boolean;
        /**
          * To link this control to an element that labels it.
         */
        "labelledById"?: string;
        /**
          * Name of the Selectable. Can be used to group Selectables.
         */
        "name"?: string;
        /**
          * Emitted when the user checks or unchecks the Selectable.
         */
        "onDsoChange"?: (event: DsoSelectableCustomEvent<SelectableChangeEvent>) => void;
        /**
          * To mark the Selectable as required.
         */
        "required"?: boolean;
        /**
          * Type of Selectable.  `checkbox`: Multiple options `radio`: Single option.
         */
        "type": "checkbox" | "radio";
        /**
          * The value of the Selectable.
         */
        "value": string;
    }
    interface DsoSlideToggle {
        /**
          * When provided the `<button>` will be labelled with `aria-label`. For a visible label provide a `<span>` inside the component.
         */
        "accessibleLabel"?: string;
        /**
          * Set to true if Slide Toggle is checked.
         */
        "checked"?: boolean;
        /**
          * Disables the Slide Toggle, preventing it from checking/unchecking and therefor not emitting any events.
         */
        "disabled"?: boolean;
        /**
          * Provide an `id` for the `<button>`. Useful for placing your to place your own `<label for="id">`.
         */
        "identifier"?: string;
        /**
          * Provide the `id` of the element that labels this element. this property sets the `aria-labelledby` on the switch button.
         */
        "labelledbyId"?: string;
        /**
          * Emitted when user checks or unchecks the Slide Toggle.
         */
        "onDsoActiveChange"?: (event: DsoSlideToggleCustomEvent<SlideToggleActiveEvent>) => void;
    }
    interface DsoTable {
        /**
          * Indicates whether the table is currently horizontally scrollable.
         */
        "isResponsive"?: boolean;
        /**
          * Prevents the table being opened in a modal.
         */
        "noModal"?: boolean;
    }
    interface DsoToggletip {
        /**
          * Toggletip label.
         */
        "label"?: string;
        /**
          * Toggletip position.
         */
        "position"?: "top" | "right" | "bottom" | "left";
        /**
          * Set to true for secondary Toggletip.
         */
        "secondary"?: boolean;
        /**
          * Set to true for small Toggletip.
         */
        "small"?: boolean;
    }
    interface DsoTooltip {
        /**
          * Whether or not to show the tooltip. To control the tooltip add the `active` attribute or use the `activate()` and `deactivate()` instance methods.
         */
        "active"?: boolean;
        /**
          * Defines if the tooltip is descriptive. A descriptive tooltip contains a meaningful message. Tooltips that are not descriptive are hidden from screenreaders using `aria-hidden`.
         */
        "descriptive"?: boolean;
        /**
          * Set attribute `no-arrow` to hide the arrow
         */
        "noArrow"?: boolean;
        /**
          * Set position of tooltip relative to target
         */
        "position"?: "top" | "right" | "bottom" | "left";
        /**
          * Defines if the tooltip has a smaller max-width
         */
        "small"?: boolean;
        /**
          * Deactivates mouseover behaviour
         */
        "stateless"?: boolean;
        /**
          * Set position strategy of tooltip
         */
        "strategy"?: "auto" | "absolute" | "fixed";
    }
    interface DsoTreeView {
        /**
          * The collection of TreeViewItems
         */
        "collection": TreeViewItem[];
        /**
          * Emitted when a tree view item is clicked. The `detail` property of the `CustomEvent` will contain an object with: `path` = the complete path of TreeViewItems from the root to the item that is emitting the clicked event. `originalEvent` = the original click event. The consumer of the event is responsible for updating the TreeView's collection (usually set the active state on the last TreeViewItem in path and clear all other active item states).
         */
        "onDsoClickItem"?: (event: DsoTreeViewCustomEvent<TreeViewPointerEvent>) => void;
        /**
          * Emitted when a tree view item is closed. The `detail` property of the `CustomEvent` will contain the complete path of TreeViewItems from the root to the item that is emitting the close event. The consumer of the event is responsible for updating the TreeView's collection (usually set the closed state on the last TreeViewItem in path).
         */
        "onDsoCloseItem"?: (event: DsoTreeViewCustomEvent<TreeViewItem[]>) => void;
        /**
          * Emitted when a tree view item is opened. The `detail` property of the `CustomEvent` will contain the complete path of TreeViewItems from the root to the item that is emitting the open event. The consumer of the event is responsible for updating the TreeView's collection (usually set the open state on the last TreeViewItem in path).
         */
        "onDsoOpenItem"?: (event: DsoTreeViewCustomEvent<TreeViewItem[]>) => void;
    }
    interface DsoViewerGrid {
        /**
          * Set active tab in tab view.
         */
        "activeTab"?: ViewerGridVdkTab | ViewerGridVrkTab;
        /**
          * **VDK only.** Set to true when document panel should show.
         */
        "documentPanelOpen"?: boolean;
        /**
          * **VDK only.** Size of the panel when component loads.  Default size is `large`.
         */
        "documentPanelSize"?: ViewerGridPanelSize;
        /**
          * Set to true when filterpanel should show.
         */
        "filterpanelOpen"?: boolean;
        /**
          * **VDK only.** Set to show main panel expanded.
         */
        "mainPanelExpanded"?: boolean;
        /**
          * **VDK only.** Set to hide the main panel.
         */
        "mainPanelHidden"?: boolean;
        /**
          * Size of the panel when component loads.  Default size is `large`.
         */
        "mainSize"?: ViewerGridPanelSize;
        /**
          * VRK or VDK implementation.
         */
        "mode"?: ViewerGridMode;
        /**
          * Emitted when user applies filterpanel options.
         */
        "onDsoActiveTabSwitch"?: (event: DsoViewerGridCustomEvent<ViewerGridActiveTabSwitchEvent>) => void;
        /**
          * Emitted when user wants to close the overlay.
         */
        "onDsoCloseOverlay"?: (event: DsoViewerGridCustomEvent<ViewerGridCloseOverlayEvent>) => void;
        /**
          * **VDK only.** Emitted on interaction with sizing buttons.
         */
        "onDsoDocumentPanelSizeChange"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeEvent>) => void;
        /**
          * **VDK only.** Emitted after main size animation.
         */
        "onDsoDocumentPanelSizeChangeAnimationEnd"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeAnimationEndEvent>) => void;
        /**
          * Emitted when user applies filterpanel options.
         */
        "onDsoFilterpanelApply"?: (event: DsoViewerGridCustomEvent<ViewerGridFilterpanelApplyEvent>) => void;
        /**
          * Emitted when user cancels filterpanel.
         */
        "onDsoFilterpanelCancel"?: (event: DsoViewerGridCustomEvent<ViewerGridFilterpanelCancelEvent>) => void;
        /**
          * **VDK only.** Emitted when the user wants to expand the main panel.
         */
        "onDsoMainPanelExpand"?: (event: DsoViewerGridCustomEvent<ViewerGridMainExpandEvent>) => void;
        /**
          * **VDK only.** Emitted when the user toggles the visibility of the main panel.  Also emitted by scripting when the panels do not fit anymore.
         */
        "onDsoMainPanelToggle"?: (event: DsoViewerGridCustomEvent<ViewerGridMainToggleEvent>) => void;
        /**
          * Emitted on interaction with sizing buttons.
         */
        "onDsoMainSizeChange"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeEvent>) => void;
        /**
          * Emitted after main size animation.
         */
        "onDsoMainSizeChangeAnimationEnd"?: (event: DsoViewerGridCustomEvent<ViewerGridChangeSizeAnimationEndEvent>) => void;
        /**
          * Set to true when overlay should show.
         */
        "overlayOpen"?: boolean;
    }
    interface DsotDocumentComponentDemo {
        /**
          * Name of the file to load.
         */
        "jsonFile"?: string;
        /**
          * To demo user interacting with IntRef or IntIoRef elements.
         */
        "onDsotOzonContentAnchorClick"?: (event: DsotDocumentComponentDemoCustomEvent<DocumentComponentOzonContentAnchorClickEvent>) => void;
        /**
          * The default state for all Document Components.
         */
        "openDefault"?: boolean;
        /**
          * Show canvas to where Document Component extends.
         */
        "showCanvas"?: boolean;
    }
    interface IntrinsicElements {
        "dso-accordion": DsoAccordion;
        "dso-accordion-section": DsoAccordionSection;
        "dso-action-list": DsoActionList;
        "dso-action-list-item": DsoActionListItem;
        "dso-alert": DsoAlert;
        "dso-annotation-button": DsoAnnotationButton;
        "dso-annotation-output": DsoAnnotationOutput;
        "dso-attachments-counter": DsoAttachmentsCounter;
        "dso-autosuggest": DsoAutosuggest;
        "dso-badge": DsoBadge;
        "dso-banner": DsoBanner;
        "dso-card": DsoCard;
        "dso-card-container": DsoCardContainer;
        "dso-date-picker": DsoDatePicker;
        "dso-document-component": DsoDocumentComponent;
        "dso-dropdown-menu": DsoDropdownMenu;
        "dso-expandable": DsoExpandable;
        "dso-header": DsoHeader;
        "dso-helpcenter-panel": DsoHelpcenterPanel;
        "dso-highlight-box": DsoHighlightBox;
        "dso-icon": DsoIcon;
        "dso-image-overlay": DsoImageOverlay;
        "dso-info": DsoInfo;
        "dso-info-button": DsoInfoButton;
        "dso-label": DsoLabel;
        "dso-list-button": DsoListButton;
        "dso-logo": DsoLogo;
        "dso-map-base-layers": DsoMapBaseLayers;
        "dso-map-controls": DsoMapControls;
        "dso-map-overlays": DsoMapOverlays;
        "dso-modal": DsoModal;
        "dso-ozon-content": DsoOzonContent;
        "dso-pagination": DsoPagination;
        "dso-progress-bar": DsoProgressBar;
        "dso-progress-indicator": DsoProgressIndicator;
        "dso-responsive-element": DsoResponsiveElement;
        "dso-scrollable": DsoScrollable;
        "dso-selectable": DsoSelectable;
        "dso-slide-toggle": DsoSlideToggle;
        "dso-table": DsoTable;
        "dso-toggletip": DsoToggletip;
        "dso-tooltip": DsoTooltip;
        "dso-tree-view": DsoTreeView;
        "dso-viewer-grid": DsoViewerGrid;
        "dsot-document-component-demo": DsotDocumentComponentDemo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dso-accordion": LocalJSX.DsoAccordion & JSXBase.HTMLAttributes<HTMLDsoAccordionElement>;
            "dso-accordion-section": LocalJSX.DsoAccordionSection & JSXBase.HTMLAttributes<HTMLDsoAccordionSectionElement>;
            "dso-action-list": LocalJSX.DsoActionList & JSXBase.HTMLAttributes<HTMLDsoActionListElement>;
            "dso-action-list-item": LocalJSX.DsoActionListItem & JSXBase.HTMLAttributes<HTMLDsoActionListItemElement>;
            "dso-alert": LocalJSX.DsoAlert & JSXBase.HTMLAttributes<HTMLDsoAlertElement>;
            "dso-annotation-button": LocalJSX.DsoAnnotationButton & JSXBase.HTMLAttributes<HTMLDsoAnnotationButtonElement>;
            "dso-annotation-output": LocalJSX.DsoAnnotationOutput & JSXBase.HTMLAttributes<HTMLDsoAnnotationOutputElement>;
            "dso-attachments-counter": LocalJSX.DsoAttachmentsCounter & JSXBase.HTMLAttributes<HTMLDsoAttachmentsCounterElement>;
            "dso-autosuggest": LocalJSX.DsoAutosuggest & JSXBase.HTMLAttributes<HTMLDsoAutosuggestElement>;
            "dso-badge": LocalJSX.DsoBadge & JSXBase.HTMLAttributes<HTMLDsoBadgeElement>;
            "dso-banner": LocalJSX.DsoBanner & JSXBase.HTMLAttributes<HTMLDsoBannerElement>;
            "dso-card": LocalJSX.DsoCard & JSXBase.HTMLAttributes<HTMLDsoCardElement>;
            "dso-card-container": LocalJSX.DsoCardContainer & JSXBase.HTMLAttributes<HTMLDsoCardContainerElement>;
            "dso-date-picker": LocalJSX.DsoDatePicker & JSXBase.HTMLAttributes<HTMLDsoDatePickerElement>;
            "dso-document-component": LocalJSX.DsoDocumentComponent & JSXBase.HTMLAttributes<HTMLDsoDocumentComponentElement>;
            "dso-dropdown-menu": LocalJSX.DsoDropdownMenu & JSXBase.HTMLAttributes<HTMLDsoDropdownMenuElement>;
            "dso-expandable": LocalJSX.DsoExpandable & JSXBase.HTMLAttributes<HTMLDsoExpandableElement>;
            "dso-header": LocalJSX.DsoHeader & JSXBase.HTMLAttributes<HTMLDsoHeaderElement>;
            "dso-helpcenter-panel": LocalJSX.DsoHelpcenterPanel & JSXBase.HTMLAttributes<HTMLDsoHelpcenterPanelElement>;
            "dso-highlight-box": LocalJSX.DsoHighlightBox & JSXBase.HTMLAttributes<HTMLDsoHighlightBoxElement>;
            "dso-icon": LocalJSX.DsoIcon & JSXBase.HTMLAttributes<HTMLDsoIconElement>;
            "dso-image-overlay": LocalJSX.DsoImageOverlay & JSXBase.HTMLAttributes<HTMLDsoImageOverlayElement>;
            "dso-info": LocalJSX.DsoInfo & JSXBase.HTMLAttributes<HTMLDsoInfoElement>;
            "dso-info-button": LocalJSX.DsoInfoButton & JSXBase.HTMLAttributes<HTMLDsoInfoButtonElement>;
            "dso-label": LocalJSX.DsoLabel & JSXBase.HTMLAttributes<HTMLDsoLabelElement>;
            "dso-list-button": LocalJSX.DsoListButton & JSXBase.HTMLAttributes<HTMLDsoListButtonElement>;
            "dso-logo": LocalJSX.DsoLogo & JSXBase.HTMLAttributes<HTMLDsoLogoElement>;
            "dso-map-base-layers": LocalJSX.DsoMapBaseLayers & JSXBase.HTMLAttributes<HTMLDsoMapBaseLayersElement>;
            "dso-map-controls": LocalJSX.DsoMapControls & JSXBase.HTMLAttributes<HTMLDsoMapControlsElement>;
            "dso-map-overlays": LocalJSX.DsoMapOverlays & JSXBase.HTMLAttributes<HTMLDsoMapOverlaysElement>;
            "dso-modal": LocalJSX.DsoModal & JSXBase.HTMLAttributes<HTMLDsoModalElement>;
            "dso-ozon-content": LocalJSX.DsoOzonContent & JSXBase.HTMLAttributes<HTMLDsoOzonContentElement>;
            "dso-pagination": LocalJSX.DsoPagination & JSXBase.HTMLAttributes<HTMLDsoPaginationElement>;
            "dso-progress-bar": LocalJSX.DsoProgressBar & JSXBase.HTMLAttributes<HTMLDsoProgressBarElement>;
            "dso-progress-indicator": LocalJSX.DsoProgressIndicator & JSXBase.HTMLAttributes<HTMLDsoProgressIndicatorElement>;
            "dso-responsive-element": LocalJSX.DsoResponsiveElement & JSXBase.HTMLAttributes<HTMLDsoResponsiveElementElement>;
            "dso-scrollable": LocalJSX.DsoScrollable & JSXBase.HTMLAttributes<HTMLDsoScrollableElement>;
            "dso-selectable": LocalJSX.DsoSelectable & JSXBase.HTMLAttributes<HTMLDsoSelectableElement>;
            "dso-slide-toggle": LocalJSX.DsoSlideToggle & JSXBase.HTMLAttributes<HTMLDsoSlideToggleElement>;
            "dso-table": LocalJSX.DsoTable & JSXBase.HTMLAttributes<HTMLDsoTableElement>;
            "dso-toggletip": LocalJSX.DsoToggletip & JSXBase.HTMLAttributes<HTMLDsoToggletipElement>;
            "dso-tooltip": LocalJSX.DsoTooltip & JSXBase.HTMLAttributes<HTMLDsoTooltipElement>;
            "dso-tree-view": LocalJSX.DsoTreeView & JSXBase.HTMLAttributes<HTMLDsoTreeViewElement>;
            "dso-viewer-grid": LocalJSX.DsoViewerGrid & JSXBase.HTMLAttributes<HTMLDsoViewerGridElement>;
            "dsot-document-component-demo": LocalJSX.DsotDocumentComponentDemo & JSXBase.HTMLAttributes<HTMLDsotDocumentComponentDemoElement>;
        }
    }
}
