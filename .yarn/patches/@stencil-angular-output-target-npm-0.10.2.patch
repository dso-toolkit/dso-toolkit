diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index 42d26c6fc5ee9c32007dc3e485bf302e145a5dfe..7dedc8de0ab03a33b521a58ff893d0735ef61d6d 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -189,7 +189,7 @@ const createAngularComponentDefinition = (tagName, inputs, outputs, methods, inc
     // Formats the input strings into comma separated, single quoted values.
     const formattedInputs = formatToQuotedList(inputs);
     // Formats the output strings into comma separated, single quoted values.
-    const formattedOutputs = formatToQuotedList(outputs);
+    const formattedOutputs = formatToQuotedList(outputs.map((event) => event.name));
     // Formats the method strings into comma separated, single quoted values.
     const formattedMethods = formatToQuotedList(methods);
     const proxyCmpOptions = [];
@@ -209,6 +209,12 @@ const createAngularComponentDefinition = (tagName, inputs, outputs, methods, inc
     }
     const propertyDeclarations = inlineComponentProps.map((m) => createPropertyDeclaration(m, `Components.${tagNameAsPascal}['${m.name}']`, true));
     const propertiesDeclarationText = [`protected el: HTML${tagNameAsPascal}Element;`, ...propertyDeclarations].join('\n  ');
+    const outputEvents = [];
+    if (hasOutputs) {
+        for (let compilerEvent of outputs) {
+            outputEvents.push(`  ${createAngularOutputDecorator(tagName, compilerEvent)}`);
+        }
+    }
     /**
      * Notes on the generated output:
      * - We disable @angular-eslint/no-inputs-metadata-property, so that
@@ -222,20 +228,34 @@ const createAngularComponentDefinition = (tagName, inputs, outputs, methods, inc
   changeDetection: ChangeDetectionStrategy.OnPush,
   template: '<ng-content></ng-content>',
   // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
-  inputs: [${formattedInputs}],${standaloneOption}
+  inputs: [${formattedInputs}],outputs:[${formattedOutputs}],${standaloneOption}
 })
 export class ${tagNameAsPascal} {
+  ${outputEvents.join('\n')}
   ${propertiesDeclarationText}
   constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {
     c.detach();
-    this.el = r.nativeElement;${hasOutputs
-        ? `
-    proxyOutputs(this, this.el, [${formattedOutputs}]);`
-        : ''}
+    this.el = r.nativeElement;
   }
 }`;
     return output;
 };
+/**
+ * Creates an `@Output()` decorator for a custom event on a Stencil component.
+ * @param tagName The tag name of the component.
+ * @param event The Stencil component event.
+ * @returns The `@Output()` decorator as a string.
+ */
+const createAngularOutputDecorator = (tagName, event) => {
+    const tagNameAsPascal = dashToPascalCase(tagName);
+    // When updating to Stencil 3.0, the component custom event generic will be
+    // exported by default and can be referenced here with:
+    // const customEvent = `${tagNameAsPascal}CustomEvent`;
+    const customEventType = `CustomEvent`;
+    const eventType = formatOutputType(tagNameAsPascal, event);
+    const outputType = `${customEventType}<${eventType}>`;
+    return `@Output() ${event.name}: EventEmitter<${outputType}> = new EventEmitter();`;
+};
 /**
  * Sanitizes and formats the component event type.
  * @param componentClassName The class name of the component (e.g. 'MyComponent')
@@ -472,7 +492,7 @@ function generateProxies(components, pkgData, outputTarget, rootDir) {
     /**
      * The collection of named imports from @angular/core.
      */
-    const angularCoreImports = ['ChangeDetectionStrategy', 'ChangeDetectorRef', 'Component', 'ElementRef'];
+    const angularCoreImports = ['ChangeDetectionStrategy', 'ChangeDetectorRef', 'Component', 'ElementRef', 'Output'];
     if (includeOutputImports) {
         angularCoreImports.push('EventEmitter');
     }
@@ -550,7 +570,7 @@ ${createImportStatement(componentLibImports, './angular-component-lib/utils')}\n
          * 2. Optionally the @NgModule decorated class (if includeSingleComponentAngularModules is true)
          * 3. The component interface (using declaration merging for types).
          */
-        const componentDefinition = createAngularComponentDefinition(cmpMeta.tagName, inputs, outputs, methods, isCustomElementsBuild, isStandaloneBuild, inlineComponentProps);
+        const componentDefinition = createAngularComponentDefinition(cmpMeta.tagName, inputs, cmpMeta.events.filter(filterInternalProps), methods, isCustomElementsBuild, isStandaloneBuild, inlineComponentProps);
         const moduleDefinition = generateAngularModuleForComponent(cmpMeta.tagName);
         const componentTypeDefinition = createComponentTypeDefinition(outputType, tagNameAsPascal, cmpMeta.events, componentCorePackage, customElementsDir);
         proxyFileOutput.push(componentDefinition, '\n');
diff --git a/dist/index.js b/dist/index.js
index 664cdcc2e565b7f96a54aad689af69cf909bd678..d5eb199fda5802eafb4b3507039d15be64942323 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -181,7 +181,7 @@ const createAngularComponentDefinition = (tagName, inputs, outputs, methods, inc
     // Formats the input strings into comma separated, single quoted values.
     const formattedInputs = formatToQuotedList(inputs);
     // Formats the output strings into comma separated, single quoted values.
-    const formattedOutputs = formatToQuotedList(outputs);
+    const formattedOutputs = formatToQuotedList(outputs.map((event) => event.name));
     // Formats the method strings into comma separated, single quoted values.
     const formattedMethods = formatToQuotedList(methods);
     const proxyCmpOptions = [];
@@ -201,6 +201,12 @@ const createAngularComponentDefinition = (tagName, inputs, outputs, methods, inc
     }
     const propertyDeclarations = inlineComponentProps.map((m) => createPropertyDeclaration(m, `Components.${tagNameAsPascal}['${m.name}']`, true));
     const propertiesDeclarationText = [`protected el: HTML${tagNameAsPascal}Element;`, ...propertyDeclarations].join('\n  ');
+    const outputEvents = [];
+    if (hasOutputs) {
+        for (let compilerEvent of outputs) {
+            outputEvents.push(`  ${createAngularOutputDecorator(tagName, compilerEvent)}`);
+        }
+    }
     /**
      * Notes on the generated output:
      * - We disable @angular-eslint/no-inputs-metadata-property, so that
@@ -214,20 +220,34 @@ const createAngularComponentDefinition = (tagName, inputs, outputs, methods, inc
   changeDetection: ChangeDetectionStrategy.OnPush,
   template: '<ng-content></ng-content>',
   // eslint-disable-next-line @angular-eslint/no-inputs-metadata-property
-  inputs: [${formattedInputs}],${standaloneOption}
+  inputs: [${formattedInputs}],outputs:[${formattedOutputs}],${standaloneOption}
 })
 export class ${tagNameAsPascal} {
+  ${outputEvents.join('\n')}
   ${propertiesDeclarationText}
   constructor(c: ChangeDetectorRef, r: ElementRef, protected z: NgZone) {
     c.detach();
-    this.el = r.nativeElement;${hasOutputs
-        ? `
-    proxyOutputs(this, this.el, [${formattedOutputs}]);`
-        : ''}
+    this.el = r.nativeElement;
   }
 }`;
     return output;
 };
+/**
+ * Creates an `@Output()` decorator for a custom event on a Stencil component.
+ * @param tagName The tag name of the component.
+ * @param event The Stencil component event.
+ * @returns The `@Output()` decorator as a string.
+ */
+const createAngularOutputDecorator = (tagName, event) => {
+    const tagNameAsPascal = dashToPascalCase(tagName);
+    // When updating to Stencil 3.0, the component custom event generic will be
+    // exported by default and can be referenced here with:
+    // const customEvent = `${tagNameAsPascal}CustomEvent`;
+    const customEventType = `CustomEvent`;
+    const eventType = formatOutputType(tagNameAsPascal, event);
+    const outputType = `${customEventType}<${eventType}>`;
+    return `@Output() ${event.name}: EventEmitter<${outputType}> = new EventEmitter();`;
+};
 /**
  * Sanitizes and formats the component event type.
  * @param componentClassName The class name of the component (e.g. 'MyComponent')
@@ -464,7 +484,7 @@ function generateProxies(components, pkgData, outputTarget, rootDir) {
     /**
      * The collection of named imports from @angular/core.
      */
-    const angularCoreImports = ['ChangeDetectionStrategy', 'ChangeDetectorRef', 'Component', 'ElementRef'];
+    const angularCoreImports = ['ChangeDetectionStrategy', 'ChangeDetectorRef', 'Component', 'ElementRef', 'Output'];
     if (includeOutputImports) {
         angularCoreImports.push('EventEmitter');
     }
@@ -542,7 +562,7 @@ ${createImportStatement(componentLibImports, './angular-component-lib/utils')}\n
          * 2. Optionally the @NgModule decorated class (if includeSingleComponentAngularModules is true)
          * 3. The component interface (using declaration merging for types).
          */
-        const componentDefinition = createAngularComponentDefinition(cmpMeta.tagName, inputs, outputs, methods, isCustomElementsBuild, isStandaloneBuild, inlineComponentProps);
+        const componentDefinition = createAngularComponentDefinition(cmpMeta.tagName, inputs, cmpMeta.events.filter(filterInternalProps), methods, isCustomElementsBuild, isStandaloneBuild, inlineComponentProps);
         const moduleDefinition = generateAngularModuleForComponent(cmpMeta.tagName);
         const componentTypeDefinition = createComponentTypeDefinition(outputType, tagNameAsPascal, cmpMeta.events, componentCorePackage, customElementsDir);
         proxyFileOutput.push(componentDefinition, '\n');
